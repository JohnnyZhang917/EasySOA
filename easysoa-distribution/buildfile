require 'shellwords'

repositories.remote << 'http://www.ibiblio.org/maven2'

# ----------------------
# EasySOA Demo Buildfile
# ----------------------

############### HOWTO

# Type "buildr help" for a list of available tasks

############### CONFIG LOADING

NUXEO_PATH = (Buildr.settings.user['nuxeo'] != nil ? Buildr.settings.user['nuxeo']['path'] : nil) || Buildr.settings.build['nuxeo']['path'] || ENV['HOME']+'/nuxeo-dm-5.4.1-tomcat'
NODE_PATH = (Buildr.settings.user['node'] != nil ? Buildr.settings.user['node']['path'] : nil) || Buildr.settings.build['node']['path'] || ENV['HOME']+'/node'
FRASCATI_PATH = (Buildr.settings.user['frascati'] != nil ? Buildr.settings.user['frascati']['path'] : nil) || Buildr.settings.build['frascati']['path'] || './deps/frascati'

RELEASE_VERSION = (Buildr.settings.user['release'] != nil ? Buildr.settings.user['release']['version'] : nil) || Buildr.settings.build['release']['version']

PACKAGING_OUTPUT_PATH = 'easysoa'
PACKAGING_OUTPUT_ARCHIVE = 'easysoa-demo-'+RELEASE_VERSION+'.tar.gz';

# Generated
NUXEO_PLUGINS_PATH = NUXEO_PATH+'/nxserver/plugins/'
NUXEO_LIBS_PATH = NUXEO_PATH+'/nxserver/lib/'
MANIFEST_RELATIVE_PATH = 'src/main/resources/META-INF/MANIFEST.MF'

############### CUSTOM FUNCTIONS

def maven(goals, project)
  command = 'mvn '
  if !goals.is_a?(Array)
    goals = [goals]
  end
  for goal in goals
    command += goal+' '
  end
  command += '-f ' + project.base_dir + '/pom.xml'
  puts command
  system command
  puts "", ""
end
 # 
 
############### PROJECT DEFINITIONS

EASYSOA_WEB = 'easysoa:easysoa-web'
EASYSOA_REGISTRY = 'easysoa:easysoa-registry'
EASYSOA_PROXY = 'easysoa:easysoa-proxy'
EASYSOA_PAF = 'easysoa:samples:easysoa-samples-pureairflowers'
EASYSOA_TRAVEL = 'easysoa:samples:easysoa-samples-smarttravel'
EASYSOA_TRAVEL_BACKUP = 'easysoa:samples:easysoa-samples-smarttravel:easysoa-samples-smarttravel-services-backup'

define 'easysoa', :base_dir => '../' do
  
  desc 'Service registry project'
  define 'easysoa-registry' do
    
      task :mvn do
        maven(['clean', 'install'], project)
      end
      
      desc 'Send plugins to Nuxeo'
      task :dist do
      
        PLUGINS_DELETE = FileList[_(NUXEO_PLUGINS_PATH+'*.jar')]
        puts "Nuxeo plugins - Deleting : ", PLUGINS_DELETE
        rm PLUGINS_DELETE
        
        PLUGINS_TO_COPY = FileList[_(project(EASYSOA_REGISTRY).base_dir+'/target/plugins/*')]
        puts "Nuxeo plugins - Deploying : ", PLUGINS_TO_COPY
        mkdir_p NUXEO_PLUGINS_PATH
        cp PLUGINS_TO_COPY, NUXEO_LIBS_PATH
        
        LIBS_TO_COPY = FileList[_(project(EASYSOA_REGISTRY).base_dir+'/target/lib/*')]
        puts "Nuxeo libraries - Deploying : ", LIBS_TO_COPY
        
      end
    
  end
  
  define 'easysoa-web' do
    # Nothing
  end
  
  desc 'Esper & Light proxies'
  define 'easysoa-proxy' do
    task :mvn do
      maven(['clean', 'install'], project)
    end
  end
  
  define 'samples' do
  
    desc 'EasySOA Light proxy project'
    define 'easysoa-samples-pureairflowers' do
      task :mvn do
        maven(['clean', 'install'], project)
      end
    end

    desc 'Smart travel demo project'
    define 'easysoa-samples-smarttravel' do
      task :mvn do
        maven(['clean', 'install'], project)
      end
      desc 'Smart travel backup services project'
      define 'easysoa-samples-smarttravel-services-backup' do
        task :mvn do
          maven(['clean', 'assembly:assembly'], project)
        end
      end
    end
    
  end
  
end


############### TASKS DEFINITIONS
                 
desc "Builds registry components using Maven"
task :nx_mvn => [EASYSOA_REGISTRY+':mvn']
                 
desc "Deploys registry components"
task :nx_dist => [EASYSOA_REGISTRY+':dist']

desc "Cleans all registry components"
task :nx_clean => [EASYSOA_REGISTRY+':clean']
             
desc "Builds the Esper & Light proxies"
task :proxy => [EASYSOA_PROXY+':mvn']

desc "Builds PAF CXF server"
task :paf => [EASYSOA_PAF+':mvn']

desc "Builds the Smart Travel demo and its backup services"
task :travel => [EASYSOA_TRAVEL+':mvn', EASYSOA_TRAVEL_BACKUP+':mvn']

desc "Builds all needed projects"
task :buildall => ['paf', 'nx_mvn', 'proxy', 'travel']

desc "Creates the EasySOA package"
task :packageall do # TODO Less messy code

  puts "", "Starting to build EasySOA package"
  
  # Check dependencies
  if !File.exist?(NUXEO_PATH)
    raise "Files copy failed: Nuxeo not found. You need to provide a distribution of Nuxeo DM 5.4.1 in `build.yaml`."
  end
  if !File.exist?(NODE_PATH+'/node')
    raise "Files copy failed: Node not found. You need to provide a built Node path in `build.yaml` (download sources from: http://nodejs.org/#download)."
  end
  
  # Prepare EasySOA environment
  puts "Preparing EasySOA environment..."
  rm_rf PACKAGING_OUTPUT_PATH
  mkdir_p PACKAGING_OUTPUT_PATH
  mkdir_p './deps'
  cp_r FileList['packaging-files/*'], PACKAGING_OUTPUT_PATH
  
  # Download/extract node.js if necessary
  if !File.exist?('./deps/node.exe')
    puts 'Downloading node.js for Windows...'
    system 'wget', 'http://nodejs.org/dist/v0.5.1/node.exe' # XXX Linux/Cygwin-dependent
    mv 'node.exe', './deps'
  end
  puts 'Copying node.js...'
  mkdir_p PACKAGING_OUTPUT_PATH+'/node'
  cp './deps/node.exe', PACKAGING_OUTPUT_PATH+'/node'
  begin
    cp NODE_PATH+'/node', PACKAGING_OUTPUT_PATH+'/node'
  rescue Exception
    raise "Files copy failed: Node location seems invalid (binary not found)"
  end
  
  # Download/extract FraSCAti if necessary
  if !File.exist?(FRASCATI_PATH) 
    if !File.exist?('deps/frascati-1.4-bin.zip')
      puts 'FraSCAti not found, downloading it...'
      system 'wget', 'http://download.forge.objectweb.org/frascati/frascati-1.4-bin.zip' # XXX Linux/Cygwin-dependent
      mv 'frascati-1.4-bin.zip','./deps'
    end
    puts 'Extracting FraSCAti...'
    system 'unzip', '-q', '-o', './deps/frascati-1.4-bin.zip' # XXX Linux/Cygwin-dependent
    mv 'frascati-runtime-1.4', './deps/frascati'
    rm_rf FileList['./deps/frascati/doc', './deps/frascati/examples', './deps/frascati/README', './deps/frascati/RELEASE_NOTES']
  end

  # Deploy FraSCAti
  puts 'Copying FraSCAti...'
  FileUtils.cp_r FRASCATI_PATH, PACKAGING_OUTPUT_PATH
  
  # Copy web services and proxies
  puts "Copying web services and proxies..."
  puts "  * Needed libraries..."
  cp FileList[project(EASYSOA_PROXY).base_dir+"/easysoa-proxy-intents/*/target/*.jar"], PACKAGING_OUTPUT_PATH+'/frascati/lib'
  cp FileList[project(EASYSOA_TRAVEL).base_dir+"/easysoa-samples-smarttravel-currency-model/target/*.jar"], PACKAGING_OUTPUT_PATH+'/frascati/lib'
  cp FileList[project(EASYSOA_TRAVEL).base_dir+"/easysoa-samples-smarttravel-meteo-model/target/*.jar"], PACKAGING_OUTPUT_PATH+'/frascati/lib'
  cp FileList[project(EASYSOA_TRAVEL).base_dir+"/easysoa-samples-smarttravel-summary-model/target/*.jar"], PACKAGING_OUTPUT_PATH+'/frascati/sca-apps' # Conflicting with the Light trip proxy if put in lib/
  cp FileList[project(EASYSOA_TRAVEL).base_dir+"/easysoa-samples-smarttravel-translate-model/target/*.jar"], PACKAGING_OUTPUT_PATH+'/frascati/lib'
  
  puts "  * FraSCAti applications & PAF services..."
  cp_r FileList[project(EASYSOA_PAF).base_dir+'/distrib/*'], PACKAGING_OUTPUT_PATH
  cp FileList[project(EASYSOA_PROXY).base_dir+"/easysoa-proxy-core/easysoa-proxy-core-httpdiscoveryproxy/target/*.jar"], PACKAGING_OUTPUT_PATH+'/frascati/sca-apps'
  cp FileList[project(EASYSOA_TRAVEL).base_dir+"/easysoa-samples-smarttravel-trip/target/*.jar"], PACKAGING_OUTPUT_PATH+'/frascati/sca-apps'
  cp FileList[project(EASYSOA_TRAVEL).base_dir+"/easysoa-samples-smarttravel-service-ui-scaffolder-proxy/target/*.jar"], PACKAGING_OUTPUT_PATH+'/frascati/sca-apps'
  cp FileList[project(EASYSOA_PAF).base_dir+"/easysoa-samples-paf-restsoapproxy/target/*.jar"], PACKAGING_OUTPUT_PATH+'/frascati/sca-apps'
  
  puts "  * Travel backup services..."
  mkdir_p PACKAGING_OUTPUT_PATH+'/travelBackup'
  system 'unzip', '-q', '-o', FileList[project(EASYSOA_TRAVEL_BACKUP).base_dir+'/target/*-bin.zip'].to_s # XXX Linux/Cygwin-dependent
  cp_r FileList['easysoa-samples-smarttravel-services-backup*/*'], PACKAGING_OUTPUT_PATH+'/travelBackup/'
  rm_rf FileList['easysoa-samples-smarttravel-services-backup*']
  
  # Copying Nuxeo
  puts "Copying service registry (Nuxeo)..."
  begin
    cp_r NUXEO_PATH, PACKAGING_OUTPUT_PATH
  rescue Exception
    raise "Files copy failed: Nuxeo is probably running. Could you please stop it?"
  end
  system 'mv', '-T', FileList[PACKAGING_OUTPUT_PATH+'/nuxeo-dm*'].to_s, PACKAGING_OUTPUT_PATH+'/serviceRegistry' # XXX Linux/Cygwin-dependent
  cp FileList[project(EASYSOA_REGISTRY).base_dir+'/target/lib/*.jar'], PACKAGING_OUTPUT_PATH+'/serviceRegistry/lib'
  cp FileList[project(EASYSOA_REGISTRY).base_dir+'/target/plugins/*.jar'], PACKAGING_OUTPUT_PATH+'/serviceRegistry/nxserver/plugins' # TODO Check that bundles exist
  cp_r project(EASYSOA_TRAVEL).base_dir+'/easysoa-samples-smarttravel-trip/src/main/resources/smart-travel-mock-services.composite', PACKAGING_OUTPUT_PATH+'/examples'
  rm_rf FileList[PACKAGING_OUTPUT_PATH+'/serviceRegistry/log/', PACKAGING_OUTPUT_PATH+'/serviceRegistry/tmp/', PACKAGING_OUTPUT_PATH+'/serviceRegistry/nxserver/data/']
  
  puts "Copying web server (node.js + antinode)..."
  mkdir PACKAGING_OUTPUT_PATH+'/web'
  cp_r FileList[project(EASYSOA_WEB).base_dir+"/easysoa-web-server/*"], PACKAGING_OUTPUT_PATH+'/web'
  
  puts "Copying discovery by browsing proxy (node.js)..."
  mkdir PACKAGING_OUTPUT_PATH+'/dbbProxy'
  cp_r FileList[project(EASYSOA_WEB).base_dir+"/easysoa-web-proxy/*"], PACKAGING_OUTPUT_PATH+'/dbbProxy'
  
  puts "Packaging done."
  puts "You can launch EasySOA by typing 'cd easysoa', then './run.sh'."
  
end

desc "Creates the EasySOA package"
task :tgz do
  
  rm_f FileList['easysoa-demo-*']
  
  # Tar
  puts "Compressing..."
  system 'tar', '-zcf', PACKAGING_OUTPUT_ARCHIVE, 'easysoa/'  # XXX Linux/Cygwin-dependent
  
  puts "EasySOA successfully compressed in "+PACKAGING_OUTPUT_ARCHIVE
  
end
