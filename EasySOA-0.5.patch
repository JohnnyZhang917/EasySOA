diff --git a/easysoa-proxy/easysoa-proxy-core/easysoa-proxy-core-api-frascati/src/main/resources/runManager.composite b/easysoa-proxy/easysoa-proxy-core/easysoa-proxy-core-api-frascati/src/main/resources/runManager.composite
index 7eba598..b3e6183 100644
--- a/easysoa-proxy/easysoa-proxy-core/easysoa-proxy-core-api-frascati/src/main/resources/runManager.composite
+++ b/easysoa-proxy/easysoa-proxy-core/easysoa-proxy-core-api-frascati/src/main/resources/runManager.composite
@@ -24,6 +24,9 @@
 		<sca:reference name="compositeTemplates" target="TemplateProcessor/processor" />
 	</sca:component>
 
+	<sca:service name="runManagerService" promote="runManagerComponent/runManagerService">
+		<sca:interface.java interface="org.easysoa.run.RunManager" />
+	</sca:service>
 	<!-- Run Manager -->
 	<sca:component name="runManagerComponent">
 		<sca:service name="runManagerService">
diff --git a/easysoa-proxy/easysoa-proxy-core/easysoa-proxy-core-api-frascati/src/main/resources/scheduledValidationReplayEngine.composite b/easysoa-proxy/easysoa-proxy-core/easysoa-proxy-core-api-frascati/src/main/resources/scheduledValidationReplayEngine.composite
index c355c4c..88510a2 100644
--- a/easysoa-proxy/easysoa-proxy-core/easysoa-proxy-core-api-frascati/src/main/resources/scheduledValidationReplayEngine.composite
+++ b/easysoa-proxy/easysoa-proxy-core/easysoa-proxy-core-api-frascati/src/main/resources/scheduledValidationReplayEngine.composite
@@ -4,6 +4,12 @@
 	<!--  ReplayEngine service -->
 	<!--<sca:service name="scheduledValidationReplayEngineService" promote="scheduledValidationReplayEngineComponent/scheduledValidationReplayEngineService"/>-->	
 
+
+	<sca:service name="scheduledValidationReplayEngineService" 
+	promote="scheduledValidationReplayEngineComponent/scheduledValidationReplayEngineService">
+		<sca:interface.java interface="org.easysoa.validation.ExchangeReplayController" />
+	</sca:service>
+		
 	<!-- Exchange replay service -->
 	<sca:component name="scheduledValidationReplayEngineComponent">
 		<sca:service name="scheduledValidationReplayEngineService">
diff --git a/easysoa-proxy/easysoa-proxy-core/easysoa-proxy-core-handlermanager/src/main/resources/handlerManager.composite b/easysoa-proxy/easysoa-proxy-core/easysoa-proxy-core-handlermanager/src/main/resources/handlerManager.composite
index f709b7d..2cc90c2 100644
--- a/easysoa-proxy/easysoa-proxy-core/easysoa-proxy-core-handlermanager/src/main/resources/handlerManager.composite
+++ b/easysoa-proxy/easysoa-proxy-core/easysoa-proxy-core-handlermanager/src/main/resources/handlerManager.composite
@@ -10,6 +10,13 @@
 		<sca:implementation.composite name="handlerManagerBase"/>
 	</sca:component>-->
 
+   	<sca:service name="scheduledValidationReplayEngineService" 
+	promote="handlerManagerServiceBaseComp/scheduledValidationReplayEngineService">
+		<sca:interface.java interface="org.easysoa.validation.ExchangeReplayController" />
+	</sca:service>
+	<sca:service name="runManagerService" promote="handlerManagerServiceBaseComp/runManagerService">
+		<sca:interface.java interface="org.easysoa.run.RunManager" />
+	</sca:service>
 	<!-- Handler manager -->
 	<sca:service name="handlerManager" promote="handlerManagerServiceBaseComp/handlerManagerComponentService">
 		<sca:interface.java interface="org.easysoa.exchangehandler.HandlerManager" />
@@ -18,6 +25,12 @@
     	<sca:service name="handlerManagerComponentService">
       		<sca:interface.java interface="org.easysoa.exchangehandler.HandlerManager" />
     	</sca:service>
+    	<sca:service name="scheduledValidationReplayEngineService">
+			<sca:interface.java interface="org.easysoa.validation.ExchangeReplayController" />
+		</sca:service>
+		<sca:service name="runManagerService">
+			<sca:interface.java interface="org.easysoa.run.RunManager" />
+		</sca:service>
 		<sca:implementation.composite name="handlerManagerBase.composite"/>
 	</sca:component>
 
diff --git a/easysoa-proxy/easysoa-proxy-core/easysoa-proxy-core-httpdiscoveryproxy-test/src/test/java/org/easysoa/cxf/CxfProviderDispatcherTest.java b/easysoa-proxy/easysoa-proxy-core/easysoa-proxy-core-httpdiscoveryproxy-test/src/test/java/org/easysoa/cxf/CxfProviderDispatcherTest.java
index e1d4eaf..c9e6dfc 100644
--- a/easysoa-proxy/easysoa-proxy-core/easysoa-proxy-core-httpdiscoveryproxy-test/src/test/java/org/easysoa/cxf/CxfProviderDispatcherTest.java
+++ b/easysoa-proxy/easysoa-proxy-core/easysoa-proxy-core-httpdiscoveryproxy-test/src/test/java/org/easysoa/cxf/CxfProviderDispatcherTest.java
@@ -26,7 +26,7 @@
 import javax.xml.ws.Endpoint;
 
 import org.apache.log4j.Logger;
-import org.easysoa.frascati.FraSCAtiServiceException;
+import org.ow2.frascati.nuxeo.exception.FraSCAtiInNuxeoServiceException;
 import org.easysoa.test.util.AbstractProxyTestStarter;
 import org.junit.After;
 import org.junit.Before;
@@ -86,10 +86,10 @@
     /**
      * Test inside Frascati
      * @throws FrascatiException, IOException, SOAPException If a problem occurs
-     * @throws FraSCAtiServiceException 
+     * @throws FraSCAtiInNuxeoServiceException 
      */
     @Test
-    public void cxfProviderTestInFraSCAti() throws IOException, SOAPException, FraSCAtiServiceException{
+    public void cxfProviderTestInFraSCAti() throws IOException, SOAPException, FraSCAtiInNuxeoServiceException{
         // Start the CXF Meteo mock provider in FraSCAti
         // PB with FraSCAti : the port name and the service are the interface name (+ prefix or suffix)
         // JAX-WS annotations are not used in FraSCAti 
@@ -103,9 +103,9 @@
     /**
      * Start the CXF Meteo Mock provider
      * @throws FrascatiException If a problem occurs
-     * @throws FraSCAtiServiceException 
+     * @throws FraSCAtiInNuxeoServiceException 
      */
-    private void startCxfMeteoMockProvider() throws FraSCAtiServiceException {
+    private void startCxfMeteoMockProvider() throws FraSCAtiInNuxeoServiceException {
         logger.info("Services Mock Starting");
         this.componentList.add(this.frascati.processComposite("cxfMeteoMockProvider.composite"));
         //this.componentList.add(this.frascati.processComposite("src/test/resources/cxfMeteoMockProvider.composite"));
diff --git a/easysoa-proxy/easysoa-proxy-core/easysoa-proxy-core-httpdiscoveryproxy-test/src/test/java/org/easysoa/proxy/handler/event/EventExchangeHandlerTest.java b/easysoa-proxy/easysoa-proxy-core/easysoa-proxy-core-httpdiscoveryproxy-test/src/test/java/org/easysoa/proxy/handler/event/EventExchangeHandlerTest.java
index a848423..c88b259 100644
--- a/easysoa-proxy/easysoa-proxy-core/easysoa-proxy-core-httpdiscoveryproxy-test/src/test/java/org/easysoa/proxy/handler/event/EventExchangeHandlerTest.java
+++ b/easysoa-proxy/easysoa-proxy-core/easysoa-proxy-core-httpdiscoveryproxy-test/src/test/java/org/easysoa/proxy/handler/event/EventExchangeHandlerTest.java
@@ -37,7 +37,7 @@
 import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.log4j.Logger;
 import org.easysoa.EasySOAConstants;
-import org.easysoa.frascati.FraSCAtiServiceException;
+import org.ow2.frascati.nuxeo.exception.FraSCAtiInNuxeoServiceException;
 import org.easysoa.proxy.handler.event.admin.CompiledCondition;
 import org.easysoa.proxy.handler.event.admin.IEventMessageHandler;
 import org.easysoa.proxy.handler.event.admin.RegexCondition;
@@ -80,7 +80,7 @@
     }
 
     @Test
-    public void testEmpty() throws ClientProtocolException, IOException, FraSCAtiServiceException {
+    public void testEmpty() throws ClientProtocolException, IOException, FraSCAtiInNuxeoServiceException {
         // using empty event map
         String urlToListen = "http://localhost:8080/";
         // call a service to listen
@@ -93,7 +93,7 @@
     }
 
     @Test
-    public void udpateSubscriptionsTest() throws FraSCAtiServiceException, ClientProtocolException, IOException {
+    public void udpateSubscriptionsTest() throws FraSCAtiInNuxeoServiceException, ClientProtocolException, IOException {
 
         //EventMessageHandler eventMessageHandler = new EventMessageHandler();
         //	eventMessageHandler.updateSubscription(subscription, subscriptionId)
@@ -147,7 +147,7 @@
     }
 
     @Test
-    public void testWithSome() throws ClientProtocolException, IOException, FraSCAtiServiceException, InterruptedException {
+    public void testWithSome() throws ClientProtocolException, IOException, FraSCAtiInNuxeoServiceException, InterruptedException {
 
         String urlToListen = "http://localhost:8080/another";
         // set some conf
diff --git a/easysoa-proxy/easysoa-proxy-core/easysoa-proxy-core-httpdiscoveryproxy-test/src/test/java/org/easysoa/test/util/AbstractProxyTestStarter.java b/easysoa-proxy/easysoa-proxy-core/easysoa-proxy-core-httpdiscoveryproxy-test/src/test/java/org/easysoa/test/util/AbstractProxyTestStarter.java
index da191b0..6f16ad9 100644
--- a/easysoa-proxy/easysoa-proxy-core/easysoa-proxy-core-httpdiscoveryproxy-test/src/test/java/org/easysoa/test/util/AbstractProxyTestStarter.java
+++ b/easysoa-proxy/easysoa-proxy-core/easysoa-proxy-core-httpdiscoveryproxy-test/src/test/java/org/easysoa/test/util/AbstractProxyTestStarter.java
@@ -34,7 +34,7 @@
 import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.log4j.Logger;
 import org.easysoa.EasySOAConstants;
-import org.easysoa.frascati.FraSCAtiServiceException;
+import org.ow2.frascati.nuxeo.exception.FraSCAtiInNuxeoServiceException;
 import org.easysoa.frascati.api.FraSCAtiServiceItf;
 import org.easysoa.sca.frascati.RemoteFraSCAtiServiceProvider;
 import org.easysoa.sca.frascati.test.RemoteFraSCAtiServiceProviderTest;
@@ -103,7 +103,7 @@
             logger.info("FraSCATI Starting");
             componentList = new ArrayList<Composite>();
             serviceProvider = new RemoteFraSCAtiServiceProvider(null);
-            frascati = serviceProvider.getFraSCAtiService();
+            frascati = serviceProvider.getFraSCAtiInNuxeoService();
         }
     }
 
@@ -163,7 +163,7 @@
      * Start HTTP Proxy
      * 
      * @throws FrascatiException
-     * @throws FraSCAtiServiceException
+     * @throws FraSCAtiInNuxeoServiceException
      */
     protected void startHttpDiscoveryProxy(String composite, URL... urls) throws Exception {
         logger.info("HTTP Discovery Proxy Starting");
@@ -179,7 +179,7 @@
      *            If true, the Nuxeo mock is started
      * @throws FrascatiException
      *             if a problem occurs during the start of composites
-     * @throws FraSCAtiServiceException
+     * @throws FraSCAtiInNuxeoServiceException
      */
     protected void startMockServices(boolean withNuxeoMock, boolean withTwitterMock, boolean withMeteoMock) throws Exception {
         logger.info("Services Mock Starting");
diff --git a/easysoa-registry/easysoa-frascati-service-api/pom.xml b/easysoa-registry/easysoa-frascati-service-api/pom.xml
index 2ef79e4..bf81282 100644
--- a/easysoa-registry/easysoa-frascati-service-api/pom.xml
+++ b/easysoa-registry/easysoa-frascati-service-api/pom.xml
@@ -29,6 +29,23 @@
 
     <dependencies>
         <dependency>
+            <groupId>org.ow2.frascati.nuxeo</groupId>
+            <artifactId>frascati-nuxeo-service-api</artifactId>
+            <version>${frascati.version}</version>
+        </dependency>
+        <!-- <dependency>
+            <groupId>org.ow2.frascati.nuxeo</groupId>
+            <artifactId>frascati-isolated</artifactId>
+            <version>${frascati.version}</version>
+            <scope>provided</scope>
+        </dependency>
+	    <dependency>
+	      <groupId>org.nuxeo.runtime</groupId>
+	      <artifactId>nuxeo-runtime-bridge</artifactId>
+          <version>5.5-SNAPSHOT</version>
+          <scope>provided</scope>
+	    </dependency> -->
+        <dependency>
             <groupId>org.ow2.frascati.model</groupId>
             <artifactId>frascati-model</artifactId>
             <version>2.0.1.3</version>
diff --git a/easysoa-registry/easysoa-frascati-service-api/src/main/java/org/easysoa/frascati/FraSCAtiServiceException.java b/easysoa-registry/easysoa-frascati-service-api/src/main/java/org/easysoa/frascati/FraSCAtiServiceException.java
deleted file mode 100644
index 857ebe3..0000000
--- a/easysoa-registry/easysoa-frascati-service-api/src/main/java/org/easysoa/frascati/FraSCAtiServiceException.java
+++ /dev/null
@@ -1,49 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati;
-
-/**
- * 
- * An exception thrown by a FraSCAtiServiceItf implementation instance
- * Use to wrap FrascatiException which is not visible outside of the FraSCAti
- * context
- */
-public class FraSCAtiServiceException extends Exception
-{
-    /**
-     * Generated serial ID
-     */
-    private static final long serialVersionUID = 4118928600670547821L;
-    
-    /**
-     * Constructor
-     */
-    public FraSCAtiServiceException()
-    {
-        super();
-    }
-    /**
-     * Constructor with a message
-     */
-    public FraSCAtiServiceException(String message)
-    {
-        super(message);
-    }
-}
diff --git a/easysoa-registry/easysoa-frascati-service-api/src/main/java/org/easysoa/frascati/api/FraSCAtiServiceItf.java b/easysoa-registry/easysoa-frascati-service-api/src/main/java/org/easysoa/frascati/api/FraSCAtiServiceItf.java
index 3e3726b..e973811 100644
--- a/easysoa-registry/easysoa-frascati-service-api/src/main/java/org/easysoa/frascati/api/FraSCAtiServiceItf.java
+++ b/easysoa-registry/easysoa-frascati-service-api/src/main/java/org/easysoa/frascati/api/FraSCAtiServiceItf.java
@@ -22,14 +22,14 @@
 import java.net.URL;
 import java.util.List;
 
-import org.easysoa.frascati.FraSCAtiServiceException;
+import org.ow2.frascati.nuxeo.api.FraSCAtiInNuxeoServiceItf;
+import org.ow2.frascati.nuxeo.exception.FraSCAtiInNuxeoServiceException;
 import org.eclipse.stp.sca.Composite;
 import org.osoa.sca.annotations.Service;
 
 @Service
-public interface FraSCAtiServiceItf
+public interface FraSCAtiServiceItf extends FraSCAtiInNuxeoServiceItf
 {
-
     //Define FraSCAti's ProcessingModes as integers
     public static final int parse = 0;
     public static final int check = 1;
@@ -39,6 +39,16 @@
     public static final int complete = 5;
     public static final int start = 6;
     public static final int all = 7;
+    
+    /**
+     * The name of component providing the service.
+     */
+    public static final String FRASCATI_IN_NUXEO_SERVICE_COMPONENT_NAME = "easysoa";
+
+    /**
+     * The name of service implementing the FraSCAtiInNuxeoServiceItf interface
+     */
+    public static final String FRASCATI_IN_NUXEO_SERVICE_SERVICE_NAME = "frascati-service";
 
     /**
      * Return the Composite which name is passed on as a parameter
@@ -46,11 +56,11 @@
      * @param compositeName
      *            the name of the composite
      * @return the composite
-     * @throws FraSCAtiServiceException
+     * @throws FraSCAtiInNuxeoServiceException
      *             if the composite doesn't exist
      */
     Composite getComposite(String compositeName)
-            throws FraSCAtiServiceException;
+            throws FraSCAtiInNuxeoServiceException;
 
     /**
      * Process a contribution ZIP archive.
@@ -63,24 +73,11 @@
      * @param urls
      *            a set of URLs to build the FraSCAti ProcessingContext
      * @return an array of loaded components' name.
-     * @throws FraSCAtiServiceException
+     * @throws FraSCAtiInNuxeoServiceException
      *             if no component can be found in the contribution file
      */
     String[] processContribution(String contribution, int processingMode,
-            URL... urls) throws FraSCAtiServiceException;
-
-    /**
-     * Process a contribution ZIP archive, using the ProcessingMode.all mode
-     * 
-     * @param contribution
-     *            name of the contribution file to load.
-     * @return an array of FraSCAtiCompositeItf embedded loaded composites.
-     * @throws FraSCAtiServiceException
-     *             if no component can be found in the contribution file
-     */
-    String[] processContribution(String contribution)
-            throws FraSCAtiServiceException;
-
+            URL... urls) throws FraSCAtiInNuxeoServiceException;
     /**
      * Loads an SCA composite and create the associate FraSCAti composite
      * instance.
@@ -94,11 +91,11 @@
      *            a set of URLs to build the FraSCAti ProcessingContext
      * @return the FraSCAtiCompositeItf embedded resulting FraSCAti composite
      *         instance.
-     * @throws FraSCAtiServiceException
+     * @throws FraSCAtiInNuxeoServiceException
      *             if the composite can not be loaded
      */
     Composite processComposite(String composite, int processingMode, URL... urls)
-            throws FraSCAtiServiceException;
+            throws FraSCAtiInNuxeoServiceException;
 
     /**
      * Load an SCA composite which path is passed on as a parameter
@@ -106,69 +103,11 @@
      * @param composite
      *            name of the composite file to load
      * @return the name of the loaded component.
-     * @throws FraSCAtiServiceException
+     * @throws FraSCAtiInNuxeoServiceException
      *             if the component cannot be loaded
      */
-    Composite processComposite(String composite) throws FraSCAtiServiceException;
-
-    /**
-     * Return the state of the component which name is passed on as a
-     * parameter 
-     * 
-     * @param componentName
-     *            the name of the component to start
-     * @return
-     *          "STARTED" if the component is started
-     *          "STOPPED" if the component is stopped
-     */
-    String state(String compositeName);
+    Composite processComposite(String composite) throws FraSCAtiInNuxeoServiceException;
     
-    /**
-     * Start the component which name is passed on as parameter
-     * 
-     * @param componentName
-     *            the name of the component to start
-     */
-    void start(String compositeName);
-
-    /**
-     * Stop the component which name is passed on as parameter
-     * 
-     * @param componentName
-     *            the name of the component to stop
-     */
-    void stop(String compositeName);
-
-    /**
-     * Remove from FraSCAti the component which name is passed on as parameter
-     * 
-     * @param componentName
-     *            the name of the component to remove
-     * @throws FraSCAtiServiceException
-     *             if the component doesn't exist
-     */
-    void remove(String compositeName) 
-            throws FraSCAtiServiceException;
-
-    /**
-     * Return the service associated to the component which name is passed on as
-     * parameter, with the name and class type also passed on as parameter
-     * 
-     * @param compositeName
-     *            the name of the composite to look the service in
-     * @param serviceName
-     *            the service name
-     * @param serviceClass
-     *            the service class
-     * @return the service instance
-     * @throws FraSCAtiServiceException
-     *             if the service has not been found
-     */
-    <T> T getService(String compositeName, 
-            String serviceName, Class<T> serviceClass) 
-                    throws FraSCAtiServiceException;
-
-
     /**
      * Return the number of errors which occurred during 
      * the processing process
diff --git a/easysoa-registry/easysoa-frascati-service-api/src/main/java/org/easysoa/frascati/api/FraSCAtiServiceProviderItf.java b/easysoa-registry/easysoa-frascati-service-api/src/main/java/org/easysoa/frascati/api/FraSCAtiServiceProviderItf.java
deleted file mode 100644
index e457345..0000000
--- a/easysoa-registry/easysoa-frascati-service-api/src/main/java/org/easysoa/frascati/api/FraSCAtiServiceProviderItf.java
+++ /dev/null
@@ -1,34 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.api;
-
-import org.easysoa.frascati.api.FraSCAtiServiceItf;
-
-/**
- * Provide an access to a FraSCAtiServiceItf implementation instance
- */
-public interface FraSCAtiServiceProviderItf
-{
-    /**
-     * Return a FraSCAtiServiceItf implementation instance  
-     */
-    FraSCAtiServiceItf getFraSCAtiService();
-
-}
diff --git a/easysoa-registry/easysoa-frascati-service/pom.xml b/easysoa-registry/easysoa-frascati-service/pom.xml
index c56b10c..a0b0924 100644
--- a/easysoa-registry/easysoa-frascati-service/pom.xml
+++ b/easysoa-registry/easysoa-frascati-service/pom.xml
@@ -28,6 +28,24 @@
 
     <dependencies>
         <dependency>
+            <groupId>org.ow2.frascati.nuxeo</groupId>
+            <artifactId>frascati-nuxeo-service</artifactId>
+            <version>${frascati.version}</version>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.ow2.frascati.nuxeo</groupId>
+            <artifactId>frascati-nuxeo-service-api</artifactId>
+            <version>${frascati.version}</version>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.ow2.frascati.nuxeo</groupId>
+            <artifactId>frascati-event-parser</artifactId>
+            <version>${frascati.version}</version>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
             <groupId>org.easysoa.frascati</groupId>
             <artifactId>easysoa-frascati-service-api</artifactId>
             <version>0.5-SNAPSHOT</version>
@@ -94,7 +112,13 @@
                             <artifactId>xercesImpl</artifactId>
                             <version>2.9.1</version>
                             <scope>compile</scope>
-                        </dependency>
+                        </dependency>              	
+				        <dependency>
+				            <groupId>org.ow2.frascati.nuxeo</groupId>
+				            <artifactId>frascati-event-parser</artifactId>
+				            <version>${frascati.version}</version>
+				            <scope>compile</scope>
+				        </dependency>
                     </dependencies>
                 </plugin>
                 <!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
@@ -143,7 +167,7 @@
                 <groupId>org.ow2.frascati.mojo</groupId>
                 <artifactId>frascati-compiler-plugin</artifactId>
                 <configuration>
-                    <composite>org/ow2/frascati/assembly/factory/AssemblyFactory</composite>
+                    <composite>org/ow2/frascati/FraSCAti</composite>
                 </configuration>
             </plugin>
         </plugins>
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/FraSCAtiService.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/FraSCAtiService.java
index 37f6e4c..dc80b7d 100644
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/FraSCAtiService.java
+++ b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/FraSCAtiService.java
@@ -20,40 +20,21 @@
 package org.easysoa.frascati;
 
 import java.net.URL;
-//import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.logging.Level;
-import java.util.logging.Logger;
-
-import javax.xml.namespace.QName;
 
 import org.easysoa.frascati.api.FraSCAtiServiceItf;
-//import org.easysoa.frascati.api.RegistryItf;
 import org.easysoa.frascati.api.ScaImporterIntermediaryItf;
 import org.easysoa.frascati.api.ScaImporterRecipientItf;
-//import org.easysoa.frascati.api.intent.ComponentIntentObserverItf;
-import org.easysoa.frascati.api.intent.ParserIntentObserverItf;
-//import org.easysoa.frascati.api.intent.ProcessingIntentObserverItf;
-import org.easysoa.frascati.processor.EasySOAProcessingContext;
 import org.eclipse.stp.sca.Composite;
-import org.objectweb.fractal.api.Component;
-import org.objectweb.fractal.api.NoSuchInterfaceException;
-import org.objectweb.fractal.api.control.ContentController;
-import org.objectweb.fractal.api.control.IllegalLifeCycleException;
-import org.objectweb.fractal.api.control.LifeCycleController;
-import org.objectweb.fractal.api.control.NameController;
 import org.osoa.sca.annotations.Reference;
-import org.osoa.sca.annotations.Scope;
 import org.osoa.sca.annotations.Service;
-import org.ow2.frascati.assembly.factory.api.ClassLoaderManager;
-import org.ow2.frascati.assembly.factory.api.CompositeManager;
-import org.ow2.frascati.assembly.factory.api.ManagerException;
 import org.ow2.frascati.assembly.factory.api.ProcessingMode;
-import org.ow2.frascati.util.AbstractLoggeable;
+import org.ow2.frascati.nuxeo.base.api.AbstractFraSCAtiInNuxeoService;
+import org.ow2.frascati.nuxeo.exception.FraSCAtiInNuxeoServiceException;
 import org.ow2.frascati.util.FrascatiClassLoader;
-import org.ow2.frascati.util.io.IOUtils;
 
 /**
  * Implementation of the {@link FraSCAtiServiceItf}
@@ -61,31 +42,17 @@
  * @author Christophe Munilla
  *
  */
-@Scope("COMPOSITE")
-@Service(interfaces = { FraSCAtiServiceItf.class, ParserIntentObserverItf.class })
-public class FraSCAtiService 
-extends AbstractLoggeable implements FraSCAtiServiceItf, ParserIntentObserverItf
+@Service(interfaces = { FraSCAtiServiceItf.class })
+public class FraSCAtiService extends AbstractFraSCAtiInNuxeoService<EasySOAProcessingContext> 
+implements FraSCAtiServiceItf
 {
-//    @Reference(name = "registry")
-//    private RegistryItf registry;
-
-    @Reference(name = "composite-manager")
-    private CompositeManager compositeManager;
-    
-    /**
-     * The required CompositeManager
-     */
-    @Reference(name = "classloader-manager") 
-    private ClassLoaderManager classLoaderManager;
-    
     @Reference(name = "runtime-sca-importer")
     private ScaImporterIntermediaryItf runtimeSCAImporter;
-
-    private static Logger logger = Logger.getLogger(FraSCAtiService.class.getCanonicalName());
+    
+    private Map<String,Composite> compositeMap;
     
     private List<String> warningMessages;
     private List<String> errorMessages;
-    private Map<String,Composite> compositesMap;
     
     private int errors;
     private int warnings;
@@ -93,42 +60,26 @@
     /**
      * {@inheritDoc}
      * 
-     * @see org.easysoa.frascati.api.FraSCAtiServiceItf#getComposite(java.lang.String)
+     * @see org.ow2.frascati.nuxeo.base.api.AbstractFraSCAtiInNuxeoService#
+     * newProcessingContext(java.lang.ClassLoader)
      */
-    public Composite getComposite(String compositeName)
-            throws FraSCAtiServiceException
+    @Override
+    protected EasySOAProcessingContext newProcessingContext(ClassLoader classloader)
     {
-        Component component = null;
-        String componentName = IOUtils.pathLastPart(compositeName);        
-        try
-        {
-            component = getComponent(
-                    compositeManager.getTopLevelDomainComposite(),componentName);
-            
-        } catch (Exception e)
-        {
-            logger.log(Level.SEVERE,e.getMessage(),e);
-        }
-        if(component != null )
-        {
-            return compositesMap.get(compositeName);
-        } 
-        return null;    
-    }
-
+        return newProcessingContext(classloader,FraSCAtiServiceItf.all);
+    }    
+   
     /**
-     * {@inheritDoc}
-     * 
-     * @see org.easysoa.frascati.api.FraSCAtiServiceItf#processContribution(java.
-     *      lang.String, int, java.net.URL[])
+     * @param classloader
+     * @param processingMode
+     * @return
      */
-    public String[] processContribution(String contribution,
-            int processingMode, URL... urls) throws FraSCAtiServiceException
+    protected EasySOAProcessingContext newProcessingContext(ClassLoader classloader, 
+            int processingMode, URL...urls)
     {
-        EasySOAProcessingContext processingContext = 
-            new EasySOAProcessingContext(classLoaderManager.getClassLoader());
-        
-        FrascatiClassLoader fcl = (FrascatiClassLoader)processingContext.getClassLoader();
+        EasySOAProcessingContext context =  new EasySOAProcessingContext(classloader);
+        context.setProcessingMode(resovleProcessingMode(processingMode));        
+        FrascatiClassLoader fcl = (FrascatiClassLoader)context.getClassLoader();
         if(urls != null)
         {
           for(URL url : urls)
@@ -136,70 +87,67 @@
               fcl.addUrl(url);
           }
         }
-        processingContext.setProcessingMode(resovleProcessingMode(processingMode));
-        
-        ClassLoader current = Thread.currentThread().getContextClassLoader();
-        Thread.currentThread().setContextClassLoader(fcl); 
-        
-        Component[] components;        
+        return context;
+    }
+    
+    /**
+     * Constructor
+     */
+    public FraSCAtiService()
+    {
+        super();
+        compositeMap = new HashMap<String,Composite>(); 
+    }
+    
+    /**
+     * {@inheritDoc}
+     * 
+     * @see org.easysoa.frascati.api.FraSCAtiServiceItf#processContribution(java.
+     *      lang.String, int, java.net.URL[])
+     */
+    public String[] processContribution(String contribution,
+            int processingMode, URL... urls) throws FraSCAtiInNuxeoServiceException
+    {
+        EasySOAProcessingContext processingContext = newProcessingContext(
+                classLoaderManager.getClassLoader(),processingMode,urls);        
         try
         {
-            components = compositeManager.processContribution(contribution,
-                    processingContext);
-
-        } catch (ManagerException e)
-        {
-            logger.log(Level.SEVERE,e.getMessage(),e);
-            throw new FraSCAtiServiceException("Enable to process the '"
-                    + contribution + "' contribution");
+            String[] componentNames = super.processContribution(
+                    contribution, processingContext);
             
-        }catch(Exception e)
+            return componentNames;
+            
+        } catch (FraSCAtiInNuxeoServiceException e)
         {
-            logger.log(Level.SEVERE,e.getMessage(),e);
-            throw new FraSCAtiServiceException("Enable to process the '"
-                    + contribution + "' composite");
+           throw e;
+            
         } finally
         {
-            Thread.currentThread().setContextClassLoader(current);
             this.warningMessages = processingContext.getWarningMessages();
             this.errorMessages = processingContext.getErrorMessages();
             this.errors = processingContext.getErrors();
             this.warnings = processingContext.getWarnings();
-        }
-        if(components != null && components.length>0)
-        {
-            String[] processed = new String[components.length];
-            int currentComponentIndex = 0;
-            for(;currentComponentIndex<components.length;currentComponentIndex++)
-            {
-                try{
-                    processed[currentComponentIndex] = ((NameController)components[
-                       currentComponentIndex].getFcInterface(
-                        "name-controller")).getFcName();
-                    
-                } catch(NoSuchInterfaceException e)
-                {
-                    log.log(Level.WARNING,e.getMessage());
-                }
-            }
-            return processed;
-            
-        } else 
-        {
-            return new String[0];
         }
     }
 
     /**
      * {@inheritDoc}
      * 
-     * @see org.easysoa.frascati.api.FraSCAtiServiceItf#processContribution(java.
-     *      lang.String)
+     * @see org.ow2.frascati.nuxeo.base.api.AbstractFraSCAtiInNuxeoService#
+     * processContribution(java.lang.String)
      */
+    @Override
     public String[] processContribution(String contribution)
-            throws FraSCAtiServiceException
     {
-        return processContribution(contribution, FraSCAtiServiceItf.all);
+        try
+        {
+            return processContribution(contribution, FraSCAtiServiceItf.all);
+            
+        } catch (FraSCAtiInNuxeoServiceException e)
+        {
+            log.log(Level.WARNING,e.getMessage(),e);
+        }
+        return null;
     }
 
     /**
@@ -209,29 +157,25 @@
      *      .String, int, java.net.URL[])
      */
     public Composite processComposite(String composite, int processingMode,
-            URL... urls) throws FraSCAtiServiceException
+            URL... urls) throws FraSCAtiInNuxeoServiceException
     {
         FrascatiClassLoader classLoader = new FrascatiClassLoader(
                 urls!=null?urls:new URL[0] , classLoaderManager.getClassLoader());
-        EasySOAProcessingContext processingContext = new EasySOAProcessingContext(
-                classLoader);
-        processingContext.setProcessingMode(resovleProcessingMode(processingMode));
-        Component component = null;
+        EasySOAProcessingContext processingContext = newProcessingContext(
+                classLoader, processingMode);
+        
+        Composite rootComposite = null;
         try
-        {   
-            component = compositeManager.processComposite(new QName(composite),
-                    processingContext);
-            
-        } catch (ManagerException e)
         {
-            logger.log(Level.SEVERE,e.getMessage(),e);
-            throw new FraSCAtiServiceException("Enable to process the '"
-                    + composite + "' composite");
-        } catch(Exception e)
+            String componentName = super.processComposite(composite, processingContext);
+            rootComposite = processingContext.getRootComposite();
+            if(rootComposite != null)
+            {
+                compositeMap.put(componentName, rootComposite);
+            }
+        } catch (FraSCAtiInNuxeoServiceException e)
         {
-            logger.log(Level.SEVERE,e.getMessage(),e);
-            throw new FraSCAtiServiceException("Enable to process the '"
-                    + composite + "' composite");
+            throw e;
         }
         finally
         {
@@ -240,21 +184,7 @@
             this.errors = processingContext.getErrors();
             this.warnings = processingContext.getWarnings();
         }
-        if(component != null)
-        {
-            try{
-                
-                return getComposite(((NameController)component.getFcInterface(
-                    "name-controller")).getFcName());
-                
-            } catch(NoSuchInterfaceException e)
-            {
-                log.log(Level.WARNING,e.getMessage());
-            }
-        } else if (processingContext.getRootComposite() != null) {
-            return processingContext.getRootComposite();
-        }
-        return null;
+        return processingContext.getRootComposite();
     }
 
     /**
@@ -264,185 +194,33 @@
      *      .String)
      */
     public Composite processComposite(String composite)
-            throws FraSCAtiServiceException
+            throws FraSCAtiInNuxeoServiceException
     {
         return processComposite(composite, FraSCAtiServiceItf.all);
     }
     
     /**
      * {@inheritDoc}
-     * 
-     * @see org.easysoa.frascati.api.FraSCAtiServiceItf#state(java.lang.String)
+     *
+     * @see org.easysoa.frascati.api.FraSCAtiServiceItf#getComposite(java.lang.String)
      */
-    public String state(String compositeName)
+    public Composite getComposite(String compositeName)
+            throws FraSCAtiInNuxeoServiceException
     {
-        Component component = null;
-        try
-        {
-            component = getComponent(
-                    compositeManager.getTopLevelDomainComposite(),compositeName);
-            
-        } catch (Exception e)
-        {
-            logger.log(Level.SEVERE,e.getMessage(),e);
-        }
-        if (component != null)
-        {
-            try
-            {
-                LifeCycleController lcController = (LifeCycleController) component
-                        .getFcInterface("lifecycle-controller");
-                
-                return lcController.getFcState();
-                
-            } catch (NoSuchInterfaceException e)
-            {
-                log.log(Level.WARNING,e.getMessage(),e);
-            }
-        }
-        return null;
+        return compositeMap.get(compositeName);
+    }
+
+    /**
+     * {@inheritDoc}
+     * 
+     * @see org.easysoa.frascati.api.FraSCAtiServiceItf#
+     * setScaImporterRecipient(org.easysoa.frascati.api.ScaImporterRecipientItf)
+     */
+    public void setScaImporterRecipient(ScaImporterRecipientItf recipient)
+    {
+        this.runtimeSCAImporter.setScaImporterRecipient(recipient);
     }
     
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.easysoa.frascati.api.FraSCAtiServiceItf#start(java.lang.String)
-     */
-    public void start(String componentName)
-    {
-        Component component = null;
-        try
-        {
-            component = getComponent(
-                    compositeManager.getTopLevelDomainComposite(),componentName);
-            
-        } catch (Exception e)
-        {
-            logger.log(Level.SEVERE,e.getMessage(),e);
-        }
-        if (component != null)
-        {
-            try
-            {
-                LifeCycleController lcController = (LifeCycleController) component
-                        .getFcInterface("lifecycle-controller");
-                if (!LifeCycleController.STARTED.equals(lcController
-                        .getFcState()))
-                {
-                    lcController.startFc();
-                }
-            } catch (NoSuchInterfaceException e)
-            {
-                logger.log(Level.SEVERE,e.getMessage(),e);
-                
-            } catch (IllegalLifeCycleException e)
-            {
-                logger.log(Level.SEVERE,e.getMessage(),e);
-            }
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.easysoa.frascati.api.FraSCAtiServiceItf#stop(java.lang.String)
-     */
-    public void stop(String componentName)
-    {
-        Component component = null;
-        try
-        {
-            component = getComponent(
-                    compositeManager.getTopLevelDomainComposite(),componentName);
-            
-        } catch (Exception e)
-        {
-            logger.log(Level.SEVERE,e.getMessage(),e);
-        }
-        if (component != null)
-        {
-            try
-            {
-                LifeCycleController lcController = (LifeCycleController) component
-                        .getFcInterface("lifecycle-controller");
-                if (!LifeCycleController.STOPPED.equals(lcController
-                        .getFcState()))
-                {
-                    lcController.stopFc();
-                }
-            } catch (NoSuchInterfaceException e)
-            {
-                logger.log(Level.SEVERE,e.getMessage(),e);
-                
-            } catch (IllegalLifeCycleException e)
-            {
-                logger.log(Level.SEVERE,e.getMessage(),e);
-            }
-        }
-
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.easysoa.frascati.api.FraSCAtiServiceItf#remove(java.lang.String)
-     */
-    public void remove(String compositeName)
-            throws FraSCAtiServiceException
-    {
-        String componentName = IOUtils.pathLastPart(compositeName);  
-        stop(componentName);
-        try
-        {
-            compositeManager.removeComposite(componentName);
-            
-        } catch (ManagerException e)
-        {
-            logger.log(Level.SEVERE,e.getMessage(),e);
-            throw new FraSCAtiServiceException("Enable to remove the '" 
-            + componentName + "' component"); 
-        }
-
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.easysoa.frascati.api.FraSCAtiServiceItf#getService(java.lang.String,
-     *      java.lang.String, java.lang.Class)
-     */
-    public <T> T getService(String componentName,
-            String serviceName, Class<T> serviceClass)
-            throws FraSCAtiServiceException
-    {
-        Component component = null;
-        try
-        {
-            component = getComponent(
-                    compositeManager.getTopLevelDomainComposite(),componentName);
-            
-        } catch (Exception e)
-        {
-            logger.log(Level.SEVERE,e.getMessage(),e);
-        }
-        if(component != null)
-        {
-            try
-            {
-                return (T)component.getFcInterface(serviceName);
-                
-            } catch (NoSuchInterfaceException e)
-            {
-                log.log(Level.WARNING,e.getMessage(),e);
-            }
-        } else 
-        {
-            log.log(Level.WARNING,"Component '" + componentName + "' not found");
-            
-        }
-        return null;
-    }
-
     /**
      * {@inheritDoc}
      * 
@@ -510,92 +288,6 @@
             return ProcessingMode.all;
         default:
             return null;
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.easysoa.frascati.api.FraSCAtiServiceItf#
-     * setScaImporterRecipient(org.easysoa.frascati.api.ScaImporterRecipientItf)
-     */
-    public void setScaImporterRecipient(ScaImporterRecipientItf recipient)
-    {
-        this.runtimeSCAImporter.setScaImporterRecipient(recipient);
-    }
-    
-    /**
-     * Return the {@link Component} which path is passed on as a parameter if 
-     * it exists in the ScaDomain (Top Level Domain Component of FraSCAti)
-     * 
-     * @param componentName
-     *          the name of the {@link Component} to return
-     * @return
-     *          the {@link Component} if it exists, null otherwise
-     */
-    private Component getComponent(Component currentComponent,
-            String componentPath) throws Exception
-    {
-        String[] componentPathElements = componentPath.split("/");
-        String lookFor = componentPathElements[0];
-        String next = null;
-        
-        if(componentPathElements.length>1)
-        {
-            int n = 1;
-            StringBuilder nextSB = new StringBuilder();
-            for(;n<componentPathElements.length;n++)
-            {
-                nextSB.append(componentPathElements[n]);
-                if(n<componentPathElements.length - 1)
-                {
-                    nextSB.append("/");
-                }
-            }
-            next = nextSB.toString();
-        }  
-       ContentController contentController = (ContentController) currentComponent.getFcInterface(
-               "content-controller");     
-       Component[] subComponents = contentController.getFcSubComponents();
-        if(subComponents == null)
-        {
-            return null;
-        }
-        for(Component component : subComponents)
-        {
-            NameController nameController = (NameController) component.getFcInterface(
-                    "name-controller");            
-            String name = (String) nameController.getFcName();            
-            if(lookFor.equals(name))
-            {
-                if(next == null || next.length() ==0)
-                {
-                    return component;
-                    
-                } else 
-                {
-                    return getComponent(component,next);
-                }
-            }
-        }
-        return null;
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.easysoa.frascati.api.intent.ParserIntentObserverItf#
-     * compositeParsed(org.eclipse.stp.sca.Composite)
-     */
-    public void compositeParsed(Composite composite)
-    {
-        if(compositesMap == null)
-        {
-            compositesMap = new HashMap<String,Composite>();
-        }
-        if(composite != null)
-        {
-            compositesMap.put(composite.getName(),composite);
         }
     }
 }
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/WeaverInitializer.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/WeaverInitializer.java
deleted file mode 100644
index 86c8f25..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/WeaverInitializer.java
+++ /dev/null
@@ -1,190 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati;
-
-import java.lang.reflect.Method;
-
-import javax.xml.namespace.QName;
-
-import org.eclipse.stp.sca.Binding;
-import org.eclipse.stp.sca.BindingType;
-import org.eclipse.stp.sca.ComponentReference;
-import org.eclipse.stp.sca.ComponentService;
-import org.eclipse.stp.sca.Composite;
-import org.oasisopen.sca.ServiceReference;
-import org.objectweb.fractal.api.Component;
-import org.objectweb.fractal.api.NoSuchInterfaceException;
-import org.objectweb.fractal.julia.ComponentInterface;
-import org.osoa.sca.annotations.Reference;
-import org.osoa.sca.annotations.Scope;
-import org.osoa.sca.annotations.Service;
-import org.ow2.frascati.assembly.factory.api.ProcessingContext;
-import org.ow2.frascati.assembly.factory.api.Processor;
-import org.ow2.frascati.starter.api.AbstractInitializable;
-import org.ow2.frascati.parser.api.Parser;
-import org.ow2.frascati.parser.api.ParsingContext;
-import org.ow2.frascati.tinfi.TinfiComponentInterceptor;
-import org.ow2.frascati.tinfi.api.IntentHandler;
-import org.ow2.frascati.util.AbstractLoggeable;
-import org.ow2.frascati.util.reference.ServiceReferenceUtil;
-
-public class WeaverInitializer extends AbstractInitializable
-{
-
-    // --------------------------------------------------------------------------
-    // Internal state.
-    // --------------------------------------------------------------------------
-   
-    //list of service references and intent handlers to weave together
-    //those object will allow to notice each event relative to the processing or 
-    //parsing processes
-    @Reference(name = "composite-parser")
-    private Parser<Composite> parser;
-   
-    @Reference(name = "parser-intent")
-    private IntentHandler parserIntent;
-
-    @Reference(name = "composite-processor")
-    private Processor<org.eclipse.stp.sca.Composite> processorComposite;
-
-    @Reference(name = "processor-composite-intent")
-    private IntentHandler processorCompositeIntent;
-
-    @Reference(name = "component-processor")
-    private Processor<org.eclipse.stp.sca.Component> processorComponent;
-
-    @Reference(name = "processor-component-intent")
-    private IntentHandler processorComponentIntent;
-
-    @Reference(name = "component-reference-processor")
-    private Processor<ComponentReference> processorComponentReference;
-
-    @Reference(name = "processor-component-reference-intent")
-    private IntentHandler processorComponentReferenceIntent;
-
-    @Reference(name = "component-service-processor")
-    private Processor<ComponentService> processorComponentService;
-
-    @Reference(name = "processor-component-service-intent")
-    private IntentHandler processorComponentServiceIntent;
-
-    @Reference(name = "reference-processor")
-    private Processor<org.eclipse.stp.sca.Reference> processorReference;
-
-    @Reference(name = "processor-reference-intent")
-    private IntentHandler processorReferenceIntent;
-
-    @Reference(name = "service-processor")
-    private Processor<org.eclipse.stp.sca.Service> processorService;
-
-    @Reference(name = "processor-service-intent")
-    private IntentHandler processorServiceIntent;
-
-    @Reference(name = "binding-processor")
-    private Processor<Binding> processorBinding;
-
-    @Reference(name = "processor-binding-intent")
-    private IntentHandler processorBindingIntent;
-
-    @Reference(name = "sca-binding-processor")
-    private Processor<BindingType> scaProcessorBinding;
-
-    @Reference(name = "processor-sca-binding-intent")
-    private IntentHandler processorScaBindingIntent;
-
-    // -------------------------------------------------------------------------
-    // Internal methods.
-    // -------------------------------------------------------------------------
-
-    // -------------------------------------------------------------------------
-    // Public methods.
-    // -------------------------------------------------------------------------
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see
-     * org.ow2.frascati.starter.api.InitializableItf#initialize
-     * ()
-     */
-    public void doInitialize()
-    {
-        TinfiComponentInterceptor<?> tci = null;
-        Component component = null;
-        try
-        {
-            //list of service references to weave the intents with
-            Object[] serviceReferences = new Object[] { 
-                    parser, processorComposite,
-                    processorComponent, processorComponentReference,
-                    processorComponentService, processorReference,
-                    processorService, processorBinding, scaProcessorBinding };
-
-            //list of targeted interfaces name for each service references 
-            //respectively
-            String[] interfaces = new String[] { 
-                    "composite-parser",
-                    "composite-processor", "component-processor",
-                    "component-reference-processor",
-                    "component-service-processor",
-                    "composite-reference-processor",
-                    "composite-service-processor", "binding-processor",
-                    "binding-processor" };
-            
-            //list of intent handlers to weave with each service references
-            //respectively
-            IntentHandler[] handlers = new IntentHandler[] { 
-                    parserIntent, processorCompositeIntent,
-                    processorComponentIntent,
-                    processorComponentReferenceIntent,
-                    processorComponentServiceIntent, processorReferenceIntent,
-                    processorServiceIntent, processorBindingIntent,
-                    processorScaBindingIntent };
-
-            //ckeck method for Processors
-            Method check = Processor.class.getDeclaredMethod("check",
-                    new Class<?>[] { Object.class, ProcessingContext.class });
-            //parse method for the Parser
-            Method parse = Parser.class.getDeclaredMethod("parse",
-                    new Class<?>[] { QName.class, ParsingContext.class });
-            //list of methods associated to intent handlers respectively
-            Method[] methods = new Method[] {
-                    parse, check, check, check, check, check, check, check, check };
-
-            int n = 0;
-            for (; n < serviceReferences.length; n++)
-            {
-                component = ServiceReferenceUtil.getRootComponent((ServiceReference<?>) serviceReferences[n]);
-                tci = (TinfiComponentInterceptor<?>) ((ComponentInterface) component
-                        .getFcInterface(interfaces[n])).getFcItfImpl();
-                tci.addIntentHandler(handlers[n], methods[n]);
-            }
-        } catch (NoSuchInterfaceException e)
-        {
-            e.printStackTrace();
-        } catch (SecurityException e)
-        {
-            e.printStackTrace();
-        } catch (NoSuchMethodException e)
-        {
-            e.printStackTrace();
-        }
-    }
-}
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/ComponentWeaverItf.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/ComponentWeaverItf.java
deleted file mode 100644
index d4d5637..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/ComponentWeaverItf.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.api;
-
-import org.objectweb.fractal.api.Component;
-import org.osoa.sca.annotations.Service;
-
-@Service
-public interface ComponentWeaverItf 
-{
-    /**
-     * Weave the fractal Component passed on as a parameter with the 
-     * ComponentIntent instance
-     * 
-     * @param component
-     *          the fractal Component to weave
-     */
-    void weave(Component component) throws Throwable;
-}
\ No newline at end of file
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/RegistryItf.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/RegistryItf.java
deleted file mode 100644
index 558d82b..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/RegistryItf.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.api;
-
-import java.util.List;
-
-import org.easysoa.frascati.FraSCAtiServiceException;
-import org.eclipse.stp.sca.Composite;
-import org.objectweb.fractal.api.Component;
-import org.osoa.sca.annotations.Service;
-
-@Service
-public interface RegistryItf 
-{
-    /**
-     * Return the registered SCA Composite which name is passed on as a parameter
-     * 
-     * @aram compositeName
-     *          the name of the SCA Composite
-     * @return
-     *          the SCA Composite if it has been found, Null otherwise
-     */
-    Composite getComposite(String compositeName);
-    
-    /**
-     * Return the registered fractal Component which name is passed on as a
-     *  parameter
-     * 
-     * @aram componentName
-     *          the name of the fractal Component
-     * @return
-     *          the fractal Component if it has been found, Null otherwise
-     */
-    Component getComponent(String componentName);
-
-    <T> T getService(String componentName, 
-            String serviceName, Class<T> serviceClass) 
-                    throws FraSCAtiServiceException;
-
-    /**
-     * Return the list of the last processed fractal Component. The list is 
-     * empty after each call to this method
-     * 
-     * @return
-     *          the list of the last processed fractal Component
-     */
-    List<String> getProcessedComponentList();
-
-}
\ No newline at end of file
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/ScaImporterIntermediaryItf.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/ScaImporterIntermediaryItf.java
deleted file mode 100644
index 624f5f3..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/ScaImporterIntermediaryItf.java
+++ /dev/null
@@ -1,96 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.api;
-
-import org.eclipse.emf.ecore.EObject;
-import org.eclipse.stp.sca.Binding;
-
-/**
- * SCA Importer on the FraSCAti's side
- */
-public interface ScaImporterIntermediaryItf
-{
-    /**
-     * Push the name on the top of the archiNameStack stack and 
-     * the eObject on the top of the bindingStack stack
-     *  
-     * @param name
-     *          the name to push
-     * @param eObject
-     *          the EObject to push
-     */
-    void pushArchi(String name,EObject eObject);
-    
-    /**
-     * Push the Binding object passed on as parameter on the top 
-     * of the bindingStack stack and call the importSCA method
-     * 
-     * @param binding
-     */
-    void pushBinding(Binding binding);
-    
-    /**
-     * Remove the name from the top of the archiNameStack stack and the 
-     * top element (which name is normally the one passed on as 
-     * a parameter) of the bindingStack stack
-     *  
-     * @param name
-     *          the name of the EObject to remove from stacks
-     */
-    void popArchi(String name);
-    
-
-    /**
-     * Define the ScaImporterRecipientItf object for processing process
-     * If a not null ScaImporterRecipientItf is defined, sca import at runtime 
-     * is activated (must be defined before each processing process)
-     * 
-     * @param recipient
-     *          the ScaImporterRecipientItf object to use
-     */
-    void setScaImporterRecipient(ScaImporterRecipientItf recipient);
-    
-    /**
-     * Import Sca Binding at runtime
-     * 
-     * @throws Exception
-     */
-    void importSCA() throws Exception;
-
-    /**
-     * Alert that a Service or a ComponentService has been pile up on the 
-     * bindingStack
-     */
-    void defineServiceDelegate();
-
-    /**
-     * Alert that a Reference or a ComponentReference has been pile up on the 
-     * bindingStack
-     */
-    void defineReferenceDelegate();
-
-    /**
-     * Alert that a Reference (or a ComponentReference) or a Service (
-     * or a ComponentService) has been unstacked of the bindingStack
-     */
-    void clearDelegate();
-    
-
-}
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/intent/AbstractProcessorIntent.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/intent/AbstractProcessorIntent.java
deleted file mode 100644
index e7b6d34..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/intent/AbstractProcessorIntent.java
+++ /dev/null
@@ -1,99 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.api.intent;
-
-import org.easysoa.frascati.api.observer.ProcessorObserverItf;
-import org.osoa.sca.annotations.Reference;
-import org.osoa.sca.annotations.Scope;
-import org.osoa.sca.annotations.Service;
-import org.ow2.frascati.tinfi.api.IntentHandler;
-import org.ow2.frascati.tinfi.api.IntentJoinPoint;
-import org.ow2.frascati.util.AbstractLoggeable;
-
-/**
- * Define the shared code between all processor (@see org.ow2.frascati.assembly.factory.api.Processor) 
- * Intents (@see org.ow2.frascati.tinfi.api.IntentHandler)
- * 
- * @param <T>
- *      the object type handled by the targeted processor
- * @param <P>
- *      the processor observer type, which has also to handle the T type of
- *      object 
- */
-@Scope("COMPOSITE")
-@Service(IntentHandler.class)
-public abstract class AbstractProcessorIntent<T, P extends ProcessorObserverItf<T>>
-        extends AbstractLoggeable implements IntentHandler
-{
-    /**
-     * the observer to inform about processor checking process
-     */
-    @Reference(name = "observer")
-    protected P observer;
-    
-    protected T last; 
-    protected boolean checked;
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.ow2.frascati.tinfi.api.IntentHandler
-     *      #invoke(org.ow2.frascati.tinfi.api.IntentJoinPoint)
-     */
-    public Object invoke(IntentJoinPoint ijp) throws Throwable
-    {
-        Object ret;
-        Object argument = ijp.getArguments()[0];
-        checked = false;
-        try
-        {
-            @SuppressWarnings("unchecked")
-            T t = (T) argument;
-            //avoid check called twice
-            if(t != last && !checked)
-            {
-                observer.checkDo(t);
-                last = t;
-            }
-        } catch (ClassCastException e)
-        {
-            // do nothing - just proceed
-        }
-        ret = ijp.proceed();
-        
-        try
-        {
-            @SuppressWarnings("unchecked")
-            T t = (T) argument;
-            //avoid check called twice
-            if(t == last && !checked)
-            {
-                observer.checkDone(t);
-                checked = true;
-                last = t;
-            }
-        } catch (ClassCastException e)
-        {
-            // do nothing - just return
-        }
-        return ret;
-    }
-
-}
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/intent/ComponentIntentObserverItf.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/intent/ComponentIntentObserverItf.java
deleted file mode 100644
index 068cfa2..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/intent/ComponentIntentObserverItf.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.api.intent;
-
-import org.osoa.sca.annotations.Service;
-
-/**
- * A Fractal {@link org.objectweb.fractal.api.Component} observer definition
- */
-@Service
-public interface ComponentIntentObserverItf
-{
-    /**
-     * An observer of a call of Fractal {@link org.objectweb.fractal.api.Component}
-     * is informed about the nature of this call
-     * 
-     * @param componentName
-     *          the called Fractal {@link org.objectweb.fractal.api.Component}'s 
-     *          name
-     * @param serviceName
-     *          the name of the concerned Fractal {@link org.objectweb.fractal.api.Component}'s 
-     *          interface
-     * @param methodName
-     *          the name of the called method
-     */
-    void call(String componentName,String serviceName,String methodName);
-}
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/intent/ParserIntentObserverItf.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/intent/ParserIntentObserverItf.java
deleted file mode 100644
index 2b0401b..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/intent/ParserIntentObserverItf.java
+++ /dev/null
@@ -1,39 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.api.intent;
-
-import org.eclipse.stp.sca.Composite;
-import org.osoa.sca.annotations.Service;
-
-/**
- * A FraSCAti {@link org.ow2.frascati.parser.api.Parser} observer definition
- */
-@Service
-public interface ParserIntentObserverItf
-{
-    /**
-     * A FraSCAti {@link org.ow2.frascati.parser.api.Parser} observer is 
-     * informed that an SCA {@link Composite} has been parsed. 
-     * 
-     * @param composite
-     *          the SCA {@link Composite} object parsed by FraSCAti 
-     */
-    void compositeParsed(Composite composite);
-}
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/intent/ProcessingIntentObserverItf.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/intent/ProcessingIntentObserverItf.java
deleted file mode 100644
index e91ea5e..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/intent/ProcessingIntentObserverItf.java
+++ /dev/null
@@ -1,77 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.api.intent;
-
-import javax.xml.namespace.QName;
-
-import org.objectweb.fractal.api.Component;
-import org.osoa.sca.annotations.Service;
-
-/**
- * A FraSCAti {@link org.ow2.frascati.assembly.factory.api.CompositeManager}
- * observer definition
- */
-@Service
-public interface ProcessingIntentObserverItf
-{
-    /**
-     * A FraSCAti {@link org.ow2.frascati.assembly.factory.api.CompositeManager}
-     * observer is informed about the begining of a processing process for the 
-     * SCA {@link org.eclipse.stp.sca.Composite} which {@link QName} is passed 
-     * on as a parameter
-     * 
-     * @param name
-     *          the {@link QName} of the SCA 
-     *          {@link org.eclipse.stp.sca.Composite} for which a processing has
-     *          been asked for 
-     */
-    void startProcessing(QName name);
-    
-    /**
-     * A FraSCAti {@link org.ow2.frascati.assembly.factory.api.CompositeManager}
-     * observer is informed about the end of a processing process for the SCA 
-     * {@link org.eclipse.stp.sca.Composite} which {@link QName} is passed on as
-     * a parameter
-     * 
-     * @param name
-     *          the {@link QName} of the SCA {@link org.eclipse.stp.sca.Composite} 
-     *          for which a processing has been asked for 
-     */
-    void stopProcessing(QName name);
-    
-    /**
-     * A FraSCAti CompositeManager observer is informed about the creation of
-     * a Fractal {@link Component} during the processing process
-     * 
-     * @param component
-     *          the Fractal {@link Component} created during the processing 
-     *          process
-     */
-    void componentAdded(Component component);
-    
-    /**
-     * A FraSCAti CompositeManager observer is informed about the demand of a 
-     * suppression of a Fractal {@link Component}
-     * 
-     * @param componentName
-     *          the name of the Fractal {@link Component} removed
-     */
-    void componentRemoved(String componentName);
-}
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/observer/AbstractProcessorBindingObserver.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/observer/AbstractProcessorBindingObserver.java
deleted file mode 100644
index ed0db23..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/observer/AbstractProcessorBindingObserver.java
+++ /dev/null
@@ -1,59 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.api.observer;
-
-import org.eclipse.emf.ecore.EObject;
-import org.eclipse.stp.sca.Binding;
-
-/**
- * Define the shared code between all {@link Binding} processors 
- * (@see org.ow2.frascati.assembly.factory.api.Processor) observers
- * 
- * @param <T>
- *      the object type handled by the targeted processor which have to extend 
- *      {@link EObject} - Here T extends EObject instead of {@link Binding} to 
- *      be able to extend the {@link AbstractProcessorObserver} class
- */
-public abstract class AbstractProcessorBindingObserver<T extends EObject> 
-extends AbstractProcessorObserver<T>
-{   
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.easysoa.frascati.api.observer.ProcessorObserverItf#checkDo(
-     * java.lang.Object)
-     */
-    public void checkDo(T t)
-    {
-        log.info("checkDo ["+t.getClass()+"]");
-    }
-    
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.easysoa.frascati.api.observer.ProcessorObserverItf#checkDone(
-     * java.lang.Object)
-     */
-    public void checkDone(T t)
-    {
-        log.info("checkDone ["+t.getClass()+"]");
-        scaImporter.pushBinding((Binding) t);
-    }
-}
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/observer/AbstractProcessorNotBindingObserver.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/observer/AbstractProcessorNotBindingObserver.java
deleted file mode 100644
index 6449dbc..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/observer/AbstractProcessorNotBindingObserver.java
+++ /dev/null
@@ -1,70 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.api.observer;
-
-import org.eclipse.emf.ecore.EObject;
-
-/**
- * Define the shared code between all non {@link org.eclipse.stp.sca.Binding} 
- * processors (@see org.ow2.frascati.assembly.factory.api.Processor) observers
- * 
- * @param <T>
- *      the object type handled by the targeted processor which have to extend 
- *      {@link EObject}
- */
-public abstract class AbstractProcessorNotBindingObserver<T extends EObject>
-extends AbstractProcessorObserver<T>
-{
-    /**
-     * Return the name of the object, which is also an {@link EObject}
-     * 
-     * @param t
-     *            the object of which the name is to find
-     * @return 
-     *          the name of the object passed on as parameter
-     */
-    protected abstract String getName(T t);
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.easysoa.frascati.api.observer.ProcessorObserverItf#checkDo(
-     * java.lang.Object)
-     */
-    public void checkDo(T t)
-    {
-        String name = getName(t);
-        log.info("checkDo [" + t.getClass() + ":" + name + "]");
-        scaImporter.pushArchi(name, t);
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.easysoa.frascati.api.observer.ProcessorObserverItf#checkDone(
-     * java.lang.Object)
-     */
-    public void checkDone(T t)
-    {
-        String name = getName(t);
-        log.info("checkDone [" + t.getClass() + ":" + name + "]");
-        scaImporter.popArchi(name);
-    }
-}
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/observer/AbstractProcessorObserver.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/observer/AbstractProcessorObserver.java
deleted file mode 100644
index 864b5a7..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/observer/AbstractProcessorObserver.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.api.observer;
-
-import org.easysoa.frascati.api.ScaImporterIntermediaryItf;
-import org.eclipse.emf.ecore.EObject;
-import org.osoa.sca.annotations.Reference;
-import org.osoa.sca.annotations.Scope;
-import org.osoa.sca.annotations.Service;
-import org.ow2.frascati.util.AbstractLoggeable;
-
-/**
- * Define the shared code between all processors 
- * (@see org.ow2.frascati.assembly.factory.api.Processor) observers
- * 
- * @param <T>
- *      the object type handled by the targeted processor which have to extend 
- *      {@link EObject}
- */
-@Scope("COMPOSITE")
-@Service(ProcessorObserverItf.class)
-public abstract class AbstractProcessorObserver<T extends EObject> 
-extends AbstractLoggeable implements ProcessorObserverItf<T>
-{
-    /**
-     * In charge of gathering and dispatch outside of the FraSCAti's scope of 
-     * all observers data
-     */
-    @Reference(name = "runtime-sca-importer")
-    protected ScaImporterIntermediaryItf scaImporter;
-}
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/observer/ProcessorObserverItf.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/observer/ProcessorObserverItf.java
deleted file mode 100644
index e989069..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/api/observer/ProcessorObserverItf.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.api.observer;
-
-import org.osoa.sca.annotations.Service;
-
-/**
- * A FraSCAti {@link org.ow2.frascati.assembly.factory.api.Processor}
- * observer definition
- */
-@Service
-public interface ProcessorObserverItf<T> 
-{
-    /**
-     * A <T> processor observer is informed about the begining of a 
-     * checking process for the <T> object passed on as a parameter
-     * 
-     * @param t
-     *          the <T> object for which a checking has been asked for 
-     */
-    void checkDo(T t);
-    
-    /**
-     * A <T> processor observer is informed about the end of a 
-     * checking process for the <T> object passed on as a parameter
-     * 
-     * @param t
-     *          the <T> object for which a checking has been asked for 
-     */
-    void checkDone(T t);
-}
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/importer/RuntimeSCAImporter.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/importer/RuntimeSCAImporter.java
deleted file mode 100644
index fc83e56..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/importer/RuntimeSCAImporter.java
+++ /dev/null
@@ -1,193 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.importer;
-
-import java.lang.reflect.Method;
-
-import org.easysoa.frascati.api.ScaImporterIntermediaryItf;
-import org.easysoa.frascati.api.ScaImporterRecipientItf;
-import org.eclipse.emf.ecore.EObject;
-import org.eclipse.stp.sca.Binding;
-import org.osoa.sca.annotations.Scope;
-import org.osoa.sca.annotations.Service;
-import org.ow2.frascati.util.AbstractLoggeable;
-
-@Scope("COMPOSITE") 
-@Service(ScaImporterIntermediaryItf.class) 
-public class RuntimeSCAImporter
-        extends AbstractLoggeable implements ScaImporterIntermediaryItf
-{
-    protected Object parentAppliImpl;
-    protected EObject context;
-    protected Method delegate;
-    protected Method SERVICE_BINDING_VISITOR_METHOD = null;
-    protected Method REFERENCE_BINDING_VISITOR_METHOD = null;
-    private ScaImporterRecipientItf recipient;
-
-    /**
-     * Activate the visit of a Binding at runtime by the registered 
-     * ScaImporterRecipientItf. If no importer has been registered do nothing
-     */
-    public void importSCA() throws Exception
-    {
-        if (recipient == null)
-        {
-            log.info("Enable to execute a runtime visit : "
-                    + "No ScaImporterRecipientItf object registered");
-            return;
-        }
-        try
-        {
-            this.delegate.invoke(recipient);
-        } catch (NullPointerException e)
-        {
-        } catch (Exception e)
-        {
-            e.printStackTrace();
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.easysoa.frascati.api.RuntimeSCAImporterItf#pushArchi(java.lang.String ,
-     *      org.eclipse.emf.ecore.EObject)
-     */
-    public void pushArchi(String archiName, EObject eObject)
-    {
-        if (recipient == null)
-        {
-            log.config("No ScaImporterRecipientItf object registered");
-            return;
-        }
-        this.recipient.getArchiNameStack().push(archiName);
-        this.recipient.getBindingStack().push(eObject);
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.easysoa.frascati.api.RuntimeSCAImporterItf#popArchi(java.lang.String)
-     */
-    public void popArchi(String archiName)
-    {
-        if (recipient == null)
-        {
-            log.config("No ScaImporterRecipientItf object registered");
-            return;
-        }
-        this.recipient.getArchiNameStack().pop();
-        this.recipient.getBindingStack().pop();
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.easysoa.frascati.api.RuntimeSCAImporterItf#pushBinding(org.eclipse
-     *      .stp.sca.Binding)
-     */
-    public void pushBinding(Binding binding)
-    {
-        if (recipient == null)
-        {
-            log.config("No ScaImporterRecipientItf object registered");
-            return;
-        }
-        recipient.getBindingStack().push(binding);
-        try
-        {
-            importSCA();
-        } catch (Exception e)
-        {
-            e.printStackTrace();
-        } finally
-        {
-            delegate = null;
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see
-     * org.easysoa.frascati.api.ScaImporterIntermediaryItf#setScaImporterRecipient(org
-     * .easysoa.frascati.api.ScaImporterRecipientItf)
-     */
-    public void setScaImporterRecipient(ScaImporterRecipientItf recipient)
-    {
-        if (recipient == null)
-        {
-            REFERENCE_BINDING_VISITOR_METHOD = null;
-            SERVICE_BINDING_VISITOR_METHOD = null;
-            this.recipient = null;
-            this.delegate = null;
-            return;
-        }
-        this.recipient = recipient;
-        try
-        {
-            REFERENCE_BINDING_VISITOR_METHOD =
-                    ScaImporterRecipientItf.class
-                            .getDeclaredMethod("runtimeReferenceBindingVisit");
-            SERVICE_BINDING_VISITOR_METHOD =
-                    ScaImporterRecipientItf.class
-                            .getDeclaredMethod("runtimeServiceBindingVisit");
-        } catch (SecurityException e)
-        {
-            e.printStackTrace();
-        } catch (NoSuchMethodException e)
-        {
-            e.printStackTrace();
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.easysoa.frascati.api.ScaImporterIntermediaryItf#defineServiceDelegate()
-     */
-    public void defineServiceDelegate()
-    {
-        this.delegate = SERVICE_BINDING_VISITOR_METHOD;
-        
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.easysoa.frascati.api.ScaImporterIntermediaryItf#defineReferenceDelegate()
-     */
-    public void defineReferenceDelegate()
-    {
-        this.delegate = REFERENCE_BINDING_VISITOR_METHOD;
-        
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.easysoa.frascati.api.ScaImporterIntermediaryItf#clearDelegate()
-     */
-    public void clearDelegate()
-    {
-        this.delegate = null;
-        
-    }
-}
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ComponentIntent.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ComponentIntent.java
deleted file mode 100644
index e2093cf..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ComponentIntent.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.intent;
-
-import org.easysoa.frascati.api.intent.ComponentIntentObserverItf;
-import org.objectweb.fractal.api.control.NameController;
-import org.objectweb.fractal.api.type.InterfaceType;
-import org.osoa.sca.annotations.Reference;
-import org.osoa.sca.annotations.Scope;
-import org.osoa.sca.annotations.Service;
-import org.ow2.frascati.tinfi.api.IntentHandler;
-import org.ow2.frascati.tinfi.api.IntentJoinPoint;
-import org.ow2.frascati.util.AbstractLoggeable;
-
-@Scope("COMPOSITE")
-@Service(IntentHandler.class)
-public class ComponentIntent extends AbstractLoggeable implements IntentHandler
-{
-    @Reference(name = "component-intent-observer")
-    private ComponentIntentObserverItf observer;
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.ow2.frascati.tinfi.api.IntentHandler
-     *      #invoke(org.ow2.frascati.tinfi.api.IntentJoinPoint)
-     */
-    public Object invoke(IntentJoinPoint ijp) throws Throwable
-    {
-        Object ret = ijp.proceed();
-
-        String componentName = ((NameController) ijp.getComponent()
-                .getFcInterface("name-controller")).getFcName();
-
-        String serviceName = ((InterfaceType) ijp.getInterface().getFcItfType())
-                .getFcItfSignature();
-
-        String methodName = ijp.getMethod().getName();
-
-        observer.call(componentName, serviceName, methodName);
-        return ret;
-    }
-
-}
\ No newline at end of file
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ParserIntent.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ParserIntent.java
deleted file mode 100644
index 3037ebb..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ParserIntent.java
+++ /dev/null
@@ -1,57 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.intent;
-
-import org.easysoa.frascati.api.intent.ParserIntentObserverItf;
-import org.eclipse.stp.sca.Composite;
-import org.osoa.sca.annotations.Reference;
-import org.osoa.sca.annotations.Scope;
-import org.osoa.sca.annotations.Service;
-import org.ow2.frascati.tinfi.api.IntentHandler;
-import org.ow2.frascati.tinfi.api.IntentJoinPoint;
-import org.ow2.frascati.util.AbstractLoggeable;
-
-@Scope("COMPOSITE")
-@Service(IntentHandler.class)
-public class ParserIntent extends AbstractLoggeable implements IntentHandler
-{
-
-    @Reference(name = "parser-intent-observer")
-    private ParserIntentObserverItf observer;
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.ow2.frascati.tinfi.api.IntentHandler
-     *      #invoke(org.ow2.frascati.tinfi.api.IntentJoinPoint)
-     */
-    public Object invoke(IntentJoinPoint ijp) throws Throwable
-    {
-        Object ret;
-        ret = ijp.proceed();
-        if (ret instanceof Composite)
-        {
-            Composite composite = (Composite) ret;
-            observer.compositeParsed(composite);
-        }
-        return ret;
-    }
-
-}
\ No newline at end of file
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ProcessingIntent.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ProcessingIntent.java
deleted file mode 100644
index b4edbad..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ProcessingIntent.java
+++ /dev/null
@@ -1,88 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.intent;
-
-import java.util.logging.Level;
-
-import javax.xml.namespace.QName;
-
-import org.easysoa.frascati.api.ComponentWeaverItf;
-import org.easysoa.frascati.api.intent.ProcessingIntentObserverItf;
-import org.objectweb.fractal.api.Component;
-import org.osoa.sca.annotations.Reference;
-import org.osoa.sca.annotations.Scope;
-import org.osoa.sca.annotations.Service;
-import org.ow2.frascati.tinfi.api.IntentHandler;
-import org.ow2.frascati.tinfi.api.IntentJoinPoint;
-import org.ow2.frascati.util.AbstractLoggeable;
-
-@Scope("COMPOSITE")
-@Service(IntentHandler.class)
-public class ProcessingIntent extends AbstractLoggeable implements
-        IntentHandler
-{
-    @Reference(name = "component-weaver")
-    private ComponentWeaverItf componentWeaver;
-
-    @Reference(name = "processing-intent-observer")
-    private ProcessingIntentObserverItf observer;
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.ow2.frascati.tinfi.api.IntentHandler
-     *      #invoke(org.ow2.frascati.tinfi.api.IntentJoinPoint)
-     */
-    public Object invoke(IntentJoinPoint ijp) throws Throwable
-    {
-        Component component = null;
-        QName qname = null;
-        boolean process = false;
-        
-        String methodName = ijp.getMethod().getName();
-        Object argument = ijp.getArguments()[0];
-
-        if ("processComposite".equals(methodName))
-        {
-            qname = (QName) argument;
-            observer.startProcessing(qname);
-            process = true;
-        }
-        Object ret = ijp.proceed();
-        if (process)
-        {
-            component = (Component) ret;
-            componentWeaver.weave(component);
-            observer.componentAdded(component);
-            observer.stopProcessing(qname);
-
-        } else if ("removeComposite".equals(methodName))
-        {
-            String name = (String) argument;
-            log.log(Level.INFO, "Composite removed : " + name);
-            observer.componentRemoved(name);
-        } else
-        {
-            log.info("call " + methodName);
-        }
-        return ret;
-    }
-
-}
\ No newline at end of file
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ProcessorBindingIntent.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ProcessorBindingIntent.java
deleted file mode 100644
index 5c4eb40..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ProcessorBindingIntent.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.intent;
-
-import org.easysoa.frascati.api.intent.AbstractProcessorIntent;
-import org.easysoa.frascati.api.observer.ProcessorObserverItf;
-import org.eclipse.stp.sca.Binding;
-
-/**
- * Intent for the FraSCAti's Binding processor
- */
-public class ProcessorBindingIntent extends 
-AbstractProcessorIntent<Binding,ProcessorObserverItf<Binding>>
-{
-}
\ No newline at end of file
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ProcessorComponentIntent.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ProcessorComponentIntent.java
deleted file mode 100644
index a681993..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ProcessorComponentIntent.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.intent;
-
-import org.easysoa.frascati.api.intent.AbstractProcessorIntent;
-import org.easysoa.frascati.api.observer.ProcessorObserverItf;
-import org.eclipse.stp.sca.Component;
-
-/**
- * Intent for the FraSCAti's Component processor
- */
-public class ProcessorComponentIntent extends 
-AbstractProcessorIntent<Component,ProcessorObserverItf<Component>>
-{
-}
\ No newline at end of file
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ProcessorComponentReferenceIntent.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ProcessorComponentReferenceIntent.java
deleted file mode 100644
index 74b4404..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ProcessorComponentReferenceIntent.java
+++ /dev/null
@@ -1,33 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.intent;
-
-import org.easysoa.frascati.api.intent.AbstractProcessorIntent;
-import org.easysoa.frascati.api.observer.ProcessorObserverItf;
-import org.eclipse.stp.sca.ComponentReference;
-
-/**
- * Intent for the FraSCAti's ComponentReference processor
- */
-public class ProcessorComponentReferenceIntent extends 
-AbstractProcessorIntent<ComponentReference,
-ProcessorObserverItf<ComponentReference>>
-{
-}
\ No newline at end of file
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ProcessorComponentServiceIntent.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ProcessorComponentServiceIntent.java
deleted file mode 100644
index f159112..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ProcessorComponentServiceIntent.java
+++ /dev/null
@@ -1,33 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.intent;
-
-import org.easysoa.frascati.api.intent.AbstractProcessorIntent;
-import org.easysoa.frascati.api.observer.ProcessorObserverItf;
-import org.eclipse.stp.sca.ComponentService;
-
-/**
- * Intent for the FraSCAti's ComponentService processor
- */
-public class ProcessorComponentServiceIntent extends 
-AbstractProcessorIntent<ComponentService,
-ProcessorObserverItf<ComponentService>>
-{
-}
\ No newline at end of file
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ProcessorCompositeIntent.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ProcessorCompositeIntent.java
deleted file mode 100644
index 6ed4833..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ProcessorCompositeIntent.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.intent;
-
-import org.easysoa.frascati.api.intent.AbstractProcessorIntent;
-import org.easysoa.frascati.api.observer.ProcessorObserverItf;
-import org.eclipse.stp.sca.Composite;
-
-/**
- * Intent for the FraSCAti's Composite processor
- */
-public class ProcessorCompositeIntent extends 
-AbstractProcessorIntent<Composite,ProcessorObserverItf<Composite>>
-{
-}
\ No newline at end of file
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ProcessorReferenceIntent.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ProcessorReferenceIntent.java
deleted file mode 100644
index c0b85e1..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ProcessorReferenceIntent.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.intent;
-
-import org.easysoa.frascati.api.intent.AbstractProcessorIntent;
-import org.easysoa.frascati.api.observer.ProcessorObserverItf;
-import org.eclipse.stp.sca.Reference;
-
-/**
- * Intent for the FraSCAti's Reference processor
- */
-public class ProcessorReferenceIntent extends 
-AbstractProcessorIntent<Reference,ProcessorObserverItf<Reference>>
-{
-}
\ No newline at end of file
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ProcessorScaBindingIntent.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ProcessorScaBindingIntent.java
deleted file mode 100644
index 7988f56..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ProcessorScaBindingIntent.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.intent;
-
-import org.easysoa.frascati.api.intent.AbstractProcessorIntent;
-import org.easysoa.frascati.api.observer.ProcessorObserverItf;
-import org.eclipse.stp.sca.Binding;
-
-/**
- * Intent for the FraSCAti's SCABinding processor
- */
-public class ProcessorScaBindingIntent extends 
-AbstractProcessorIntent<Binding,ProcessorObserverItf<Binding>>
-{
-}
\ No newline at end of file
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ProcessorServiceIntent.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ProcessorServiceIntent.java
deleted file mode 100644
index 4be6f0b..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/intent/ProcessorServiceIntent.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.intent;
-
-import org.easysoa.frascati.api.intent.AbstractProcessorIntent;
-import org.easysoa.frascati.api.observer.ProcessorObserverItf;
-import org.eclipse.stp.sca.Service;
-
-/**
- * Intent for the FraSCAti's Service processor
- */
-public class ProcessorServiceIntent extends 
-AbstractProcessorIntent<Service,ProcessorObserverItf<Service>>
-{
-}
\ No newline at end of file
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/observer/ProcessorBindingObserver.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/observer/ProcessorBindingObserver.java
deleted file mode 100644
index 7cecd50..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/observer/ProcessorBindingObserver.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.observer;
-
-import org.easysoa.frascati.api.observer.AbstractProcessorBindingObserver;
-import org.eclipse.stp.sca.Binding;
-
-/**
- * Observer for the FraSCAti's Binding processor
- */
-public class ProcessorBindingObserver 
-extends AbstractProcessorBindingObserver<Binding>
-{
-
-}
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/observer/ProcessorComponentObserver.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/observer/ProcessorComponentObserver.java
deleted file mode 100644
index 15ef817..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/observer/ProcessorComponentObserver.java
+++ /dev/null
@@ -1,41 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.observer;
-
-import org.easysoa.frascati.api.observer.AbstractProcessorNotBindingObserver;
-import org.eclipse.stp.sca.Component;
-
-/**
- * Observer for the FraSCAti's Component processor
- */
-public class ProcessorComponentObserver
-extends AbstractProcessorNotBindingObserver<Component>
-{
-    /**
-     * {@inheritDoc}
-     * @see org.easysoa.frascati.api.observer.AbstractProcessorNotBindingObserver#
-     * getName(org.eclipse.emf.ecore.EObject)
-     */
-    protected String getName(Component t)
-    {
-        return t.getName();
-    }
-
-}
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/observer/ProcessorComponentReferenceObserver.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/observer/ProcessorComponentReferenceObserver.java
deleted file mode 100644
index 2ffcaf9..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/observer/ProcessorComponentReferenceObserver.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.observer;
-
-import org.easysoa.frascati.api.observer.AbstractProcessorNotBindingObserver;
-import org.eclipse.stp.sca.ComponentReference;
-
-
-/**
- * Observer for the FraSCAti's ComponentReference processor
- */
-public class ProcessorComponentReferenceObserver
-extends AbstractProcessorNotBindingObserver<ComponentReference>
-{
-    /**
-     * {@inheritDoc}
-     * @see org.easysoa.frascati.api.observer.AbstractProcessorNotBindingObserver#
-     * getName(org.eclipse.emf.ecore.EObject)
-     */
-    protected String getName(ComponentReference t)
-    {
-        return t.getName();
-    }
-    
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.easysoa.frascati.api.observer.ProcessorObserverItf#checkDo(java.lang.Object)
-     */
-    public void checkDo(ComponentReference t)
-    {
-        String name = getName(t);
-        log.info("checkDo [" + t.getClass() + ":" + name + "]");
-        scaImporter.pushArchi(name, t);
-        scaImporter.defineReferenceDelegate();
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.easysoa.frascati.api.observer.ProcessorObserverItf#checkDone(java.lang.Object)
-     */
-    public void checkDone(ComponentReference t)
-    {
-        String name = getName(t);
-        log.info("checkDone [" + t.getClass() + ":" + name + "]");
-        scaImporter.popArchi(name);
-        scaImporter.clearDelegate();
-    }
-}
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/observer/ProcessorComponentServiceObserver.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/observer/ProcessorComponentServiceObserver.java
deleted file mode 100644
index 70cc1cd..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/observer/ProcessorComponentServiceObserver.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.observer;
-
-import org.easysoa.frascati.api.observer.AbstractProcessorNotBindingObserver;
-import org.eclipse.stp.sca.ComponentService;
-
-/**
- * Observer for the FraSCAti's ComponentService processor
- */
-public class ProcessorComponentServiceObserver
-extends AbstractProcessorNotBindingObserver<ComponentService>
-{
-    /**
-     * {@inheritDoc}
-     * @see org.easysoa.frascati.api.observer.AbstractProcessorNotBindingObserver#
-     * getName(org.eclipse.emf.ecore.EObject)
-     */
-    protected String getName(ComponentService t)
-    {
-        return t.getName();
-    }
-    
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.easysoa.frascati.api.observer.ProcessorObserverItf#checkDo(java.lang.Object)
-     */
-    public void checkDo(ComponentService t)
-    {
-        String name = getName(t);
-        log.info("checkDo [" + t.getClass() + ":" + name + "]");
-        scaImporter.pushArchi(name, t);
-        scaImporter.defineServiceDelegate();
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.easysoa.frascati.api.observer.ProcessorObserverItf#checkDone(java.lang.Object)
-     */
-    public void checkDone(ComponentService t)
-    {
-        String name = getName(t);
-        log.info("checkDone [" + t.getClass() + ":" + name + "]");
-        scaImporter.popArchi(name);
-        scaImporter.clearDelegate();
-    }
-    
-}
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/observer/ProcessorCompositeObserver.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/observer/ProcessorCompositeObserver.java
deleted file mode 100644
index d84c070..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/observer/ProcessorCompositeObserver.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.observer;
-
-import org.easysoa.frascati.api.observer.AbstractProcessorNotBindingObserver;
-import org.eclipse.stp.sca.Composite;
-
-/**
- * Observer for the FraSCAti's Composite processor
- */
-public class ProcessorCompositeObserver
-extends AbstractProcessorNotBindingObserver<Composite>
-{
-    /**
-     * {@inheritDoc}
-     * @see org.easysoa.frascati.api.observer.AbstractProcessorNotBindingObserver#
-     * getName(org.eclipse.emf.ecore.EObject)
-     */
-    protected String getName(Composite t)
-    {
-        return t.getName();
-    }
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.easysoa.frascati.api.observer.ProcessorObserverItf#checkDo(java.lang.Object)
-     */
-    public void checkDo(Composite t)
-    {
-        String name = getName(t);
-        log.info("checkDo [" + t.getClass() + ":" + name + "]");
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.easysoa.frascati.api.observer.ProcessorObserverItf#checkDone(java.lang.Object)
-     */
-    public void checkDone(Composite t)
-    {
-        String name = getName(t);
-        log.info("checkDone [" + t.getClass() + ":" + name + "]");
-    }
-
-}
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/observer/ProcessorReferenceObserver.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/observer/ProcessorReferenceObserver.java
deleted file mode 100644
index 2430330..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/observer/ProcessorReferenceObserver.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.observer;
-
-import org.easysoa.frascati.api.observer.AbstractProcessorNotBindingObserver;
-import org.eclipse.stp.sca.Reference;
-
-/**
- * Observer for the FraSCAti's Reference processor
- */
-public class ProcessorReferenceObserver
-extends AbstractProcessorNotBindingObserver<Reference>
-{
-    /**
-     * {@inheritDoc}
-     * @see org.easysoa.frascati.api.observer.AbstractProcessorNotBindingObserver#
-     * getName(org.eclipse.emf.ecore.EObject)
-     */
-    protected String getName(Reference t)
-    {
-        return t.getName();
-    }
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.easysoa.frascati.api.observer.ProcessorObserverItf#checkDo(java.lang.Object)
-     */
-    public void checkDo(Reference t)
-    {
-        String name = getName(t);
-        log.info("checkDo [" + t.getClass() + ":" + name + "]");
-        scaImporter.pushArchi(name, t);
-        scaImporter.defineReferenceDelegate();
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.easysoa.frascati.api.observer.ProcessorObserverItf#checkDone(java.lang.Object)
-     */
-    public void checkDone(Reference t)
-    {
-        String name = getName(t);
-        log.info("checkDone [" + t.getClass() + ":" + name + "]");
-        scaImporter.popArchi(name);
-        scaImporter.clearDelegate();
-    }
-
-}
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/observer/ProcessorScaBindingObserver.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/observer/ProcessorScaBindingObserver.java
deleted file mode 100644
index db0f1ba..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/observer/ProcessorScaBindingObserver.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.observer;
-
-import org.easysoa.frascati.api.observer.AbstractProcessorBindingObserver;
-import org.eclipse.stp.sca.Binding;
-
-/**
- * Observer for the FraSCAti's SCABinding processor
- */
-public class ProcessorScaBindingObserver
-extends AbstractProcessorBindingObserver<Binding>
-{
-}
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/observer/ProcessorServiceObserver.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/observer/ProcessorServiceObserver.java
deleted file mode 100644
index 4e9d76c..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/observer/ProcessorServiceObserver.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/**
- * EasySOA - FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.observer;
-
-import org.easysoa.frascati.api.observer.AbstractProcessorNotBindingObserver;
-import org.eclipse.stp.sca.Service;
-
-/**
- * Observer for the FraSCAti's Service processor
- */
-public class ProcessorServiceObserver
-extends AbstractProcessorNotBindingObserver<Service>
-{
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.easysoa.frascati.api.observer.AbstractProcessorNotBindingObserver#
-     *      getName(org.eclipse.emf.ecore.EObject)
-     */
-    protected String getName(Service t)
-    {
-        return t.getName();
-    }
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.easysoa.frascati.api.observer.ProcessorObserverItf#checkDo(java.lang.Object)
-     */
-    public void checkDo(Service t)
-    {
-        String name = getName(t);
-        log.info("checkDo [" + t.getClass() + ":" + name + "]");
-        scaImporter.pushArchi(name, t);
-        scaImporter.defineServiceDelegate();
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.easysoa.frascati.api.observer.ProcessorObserverItf#checkDone(java.lang.Object)
-     */
-    public void checkDone(Service t)
-    {
-        String name = getName(t);
-        log.info("checkDone [" + t.getClass() + ":" + name + "]");
-        scaImporter.popArchi(name);
-        scaImporter.clearDelegate();
-    }
-
-}
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/processor/EasySOAProcessingContext.java b/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/processor/EasySOAProcessingContext.java
deleted file mode 100644
index a6cae75..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/java/org/easysoa/frascati/processor/EasySOAProcessingContext.java
+++ /dev/null
@@ -1,305 +0,0 @@
-/**
- * EasySOA
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.easysoa.frascati.processor;
-
-import java.io.File;
-import java.net.URL;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import org.eclipse.emf.common.util.URI;
-import org.eclipse.emf.ecore.EObject;
-import org.eclipse.stp.sca.Composite;
-import org.ow2.frascati.assembly.factory.api.ProcessingContext;
-import org.ow2.frascati.assembly.factory.api.ProcessingMode;
-import org.ow2.frascati.parser.api.ParsingContext;
-import org.ow2.frascati.util.AbstractLoggeable;
-import org.ow2.frascati.util.FrascatiClassLoader;
-
-public class EasySOAProcessingContext extends AbstractLoggeable implements
-        ProcessingContext, ParsingContext
-{
-
-    // ---------------------------------------------------------------------------
-    // Internal state.
-    // --------------------------------------------------------------------------
-
-    /** the class loader of this parsing context. */
-    private ClassLoader classLoader;
-
-    /** structure to store data of this parsing context. */
-    private Map<Object, Map<Class<?>, Object>> data = new HashMap<Object, Map<Class<?>, Object>>();
-
-    /** the number of warnings. */
-    private int nbWarnings;
-
-    /** the warning messages */
-    private List<String> warningMessages = new ArrayList<String>();
-
-    /** the number of errors. */
-    private int nbErrors;
-
-    /** the error messages */
-    private List<String> errorMessages = new ArrayList<String>();
-
-    /** The current processing mode */
-    private ProcessingMode processingMode = ProcessingMode.all;
-
-    /** The processed root SCA composite */
-    private Composite rootComposite;
-
-    // ---------------------------------------------------------------------------
-    // Public methods.
-    // --------------------------------------------------------------------------
-
-    /**
-     * Construct with the current thread context class loader.
-     */
-    public EasySOAProcessingContext()
-    {
-        this.classLoader = new FrascatiClassLoader();
-    }
-
-    /**
-     * Construct with an array of URLs used to create the ClassLoader.
-     * 
-     * @param classLoader
-     *            the urls array for class loader of the parser context.
-     */
-    public EasySOAProcessingContext(URL[] urls)
-    {
-        this.classLoader = new FrascatiClassLoader(urls);
-    }
-
-    /**
-     * Construct with a class loader.
-     * 
-     * @param classLoader
-     *            the class loader of the parser context.
-     */
-    public EasySOAProcessingContext(ClassLoader classLoader)
-    {
-        this.classLoader = new FrascatiClassLoader(classLoader);
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.ow2.frascati.parser.api.ParsingContext#
-     *      loadClass(java.lang.String)
-     */
-    @SuppressWarnings("unchecked")
-    public final <T> Class<T> loadClass(String className)
-    {
-        try
-        {
-            Class<T> clazz = (Class<T>) this.classLoader.loadClass(className);
-            return clazz;
-        } catch (ClassNotFoundException cnfe)
-        {
-            if (getResource(className.replace(".", File.separator) + ".java") != null)
-            {
-                return null;
-            }
-            // throw cnfe;
-        }
-        return null;
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see ProcessingContext#getProcessingMode()
-     */
-    public ProcessingMode getProcessingMode()
-    {
-        return this.processingMode;
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see ProcessingContext#setProcessingMode(ProcessingMode)
-     */
-    public final void setProcessingMode(ProcessingMode processingMode)
-    {
-        this.processingMode = processingMode;
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see ProcessingContext#getRootComposite()
-     */
-    public final Composite getRootComposite()
-    {
-        return this.rootComposite;
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see ProcessingContext#setRootComposite(Composite)
-     */
-    public final void setRootComposite(Composite composite)
-    {
-        this.rootComposite = composite;
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see ParsingContext#getClassLoader()
-     */
-    public final ClassLoader getClassLoader()
-    {
-        return this.classLoader;
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see ParsingContext#getResource(String)
-     */
-    public final URL getResource(String name)
-    {
-        return this.classLoader.getResource(name);
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see ParsingContext#putData(Object, Class, T)
-     */
-    public final <T> void putData(Object key, Class<T> type, T data)
-    {
-        Map<Class<?>, Object> data4key = this.data.get(key);
-        if (data4key == null)
-        {
-            data4key = new HashMap<Class<?>, Object>();
-            this.data.put(key, data4key);
-        }
-        data4key.put(type, data);
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see ParsingContext#getData(Object, Class)
-     */
-    @SuppressWarnings("unchecked")
-    public final <T> T getData(Object key, Class<T> type)
-    {
-        Map<Class<?>, Object> data4key = this.data.get(key);
-        if (data4key == null)
-        {
-            return null;
-        }
-        return (T) data4key.get(type);
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see ParsingContext#warning(String)
-     */
-    public void warning(String message)
-    {
-        warningMessages.add(message);
-        log.warning(message);
-        this.nbWarnings++;
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see ParsingContext#getWarnings()
-     */
-    public final int getWarnings()
-    {
-        return this.nbWarnings;
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see org.ow2.frascati.parser.api.ParsingContext#error(java.lang.String)
-     */
-    public void error(String message)
-    {
-        errorMessages.add(message);
-        log.severe(message);
-        this.nbErrors++;
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see ParsingContext#getErrors()
-     */
-    public final int getErrors()
-    {
-        return this.nbErrors;
-    }
-
-    /**
-     * {@inheritDoc}
-     * 
-     * @see ParsingContext#getLocationURI(EObject)
-     */
-    public String getLocationURI(EObject eObject)
-    {
-        URI uri = getData(eObject, URI.class);
-        return uri == null ? null : uri.toString();
-    }
-
-    // ////////////////////////////////////////////
-    // additional methods
-    
-    /**
-     * Return the list of warning messages thrown during the last 
-     * processing process
-     * 
-     * @return
-     *          the list of warning messages
-     */
-    public List<String> getWarningMessages()
-    {
-        return warningMessages;
-    }
-
-    
-    /**
-     * Return the list of error messages thrown during the last 
-     * processing process
-     * 
-     * @return
-     *          the list of error messages
-     */
-    public List<String> getErrorMessages()
-    {
-        return errorMessages;
-    }
-
-    // ////////////////////////////////////////////
-
-}
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/resources/org/easysoa/EasySOA.composite b/easysoa-registry/easysoa-frascati-service/src/main/resources/org/easysoa/EasySOA.composite
index e46802e..f2e75e6 100644
--- a/easysoa-registry/easysoa-frascati-service/src/main/resources/org/easysoa/EasySOA.composite
+++ b/easysoa-registry/easysoa-frascati-service/src/main/resources/org/easysoa/EasySOA.composite
@@ -22,9 +22,6 @@
 
     <service name="frascati-service" promote="frascati-service/frascati-service">
             <interface.java interface="org.easysoa.frascati.api.FraSCAtiServiceItf" />
-    </service>    
-    <service name="initializable" promote="weaver-initializer/initializable">
-            <interface.java interface="org.ow2.frascati.starter.api.InitializableItf"/>
     </service>
     
     <reference name="classloader-manager" promote="frascati-service/classloader-manager">
@@ -33,281 +30,13 @@
     <reference name="composite-manager"  promote="frascati-service/composite-manager">
         <interface.java interface="org.ow2.frascati.assembly.factory.api.CompositeManager" />
     </reference>
-    <reference name="composite-parser" promote="weaver-initializer/composite-parser">
-        <interface.java interface="org.ow2.frascati.parser.api.Parser" />
-    </reference>         
-    <reference name="composite-processor" promote="weaver-initializer/composite-processor">
-        <interface.java interface="org.ow2.frascati.assembly.factory.api.Processor"/>
+    <reference name="runtime-sca-importer" promote="frascati-service/runtime-sca-importer">
+        <interface.java interface="org.easysoa.frascati.api.ScaImporterIntermediaryItf"/>
     </reference>
-    <reference name="component-processor" promote="weaver-initializer/component-processor">
-        <interface.java interface="org.ow2.frascati.assembly.factory.api.Processor" />
-    </reference>
-    <reference name="component-service-processor" promote="weaver-initializer/component-service-processor">
-        <interface.java interface="org.ow2.frascati.assembly.factory.api.Processor" />
-    </reference>
-    <reference name="component-reference-processor" promote="weaver-initializer/component-reference-processor">
-        <interface.java interface="org.ow2.frascati.assembly.factory.api.Processor" />
-    </reference>
-    <reference name="composite-service-processor" promote="weaver-initializer/service-processor">
-        <interface.java interface="org.ow2.frascati.assembly.factory.api.Processor" />
-    </reference>
-    <reference name="composite-reference-processor" promote="weaver-initializer/reference-processor">
-        <interface.java interface="org.ow2.frascati.assembly.factory.api.Processor" />
-    </reference>
-    <reference name="binding-processor" promote="weaver-initializer/binding-processor">
-        <interface.java interface="org.ow2.frascati.assembly.factory.api.Processor" />
-    </reference>
-    <reference name="sca-binding-processor" promote="weaver-initializer/sca-binding-processor">
-        <interface.java interface="org.ow2.frascati.assembly.factory.api.Processor" />
-    </reference>
-
-    <component name="weaver-initializer">
-        <implementation.java class="org.easysoa.frascati.WeaverInitializer" />
-        <service name="initializable">
-            <interface.java interface="org.ow2.frascati.starter.api.InitializableItf"/>
-        </service>
-         <reference multiplicity="0..1" name="next-initializable">
-            <interface.java interface="org.ow2.frascati.starter.api.InitializableItf"/>
-        </reference>
-        <reference name="composite-parser">
-            <interface.java interface="org.ow2.frascati.parser.api.Parser" />
-        </reference>        
-        <reference name="composite-processor">
-                <interface.java interface="org.ow2.frascati.assembly.factory.api.Processor"/>
-        </reference>
-        <reference name="component-processor">
-            <interface.java interface="org.ow2.frascati.assembly.factory.api.Processor" />
-        </reference>
-        <reference name="component-service-processor">
-            <interface.java interface="org.ow2.frascati.assembly.factory.api.Processor" />
-        </reference>
-        <reference name="component-reference-processor">
-            <interface.java interface="org.ow2.frascati.assembly.factory.api.Processor" />
-        </reference>          
-        <reference name="service-processor">
-            <interface.java interface="org.ow2.frascati.assembly.factory.api.Processor" />
-        </reference>
-        <reference name="reference-processor">
-            <interface.java interface="org.ow2.frascati.assembly.factory.api.Processor" />
-        </reference>   
-        <reference name="binding-processor">
-            <interface.java interface="org.ow2.frascati.assembly.factory.api.Processor" />
-        </reference>     
-        <reference name="sca-binding-processor">
-           <interface.java interface="org.ow2.frascati.assembly.factory.api.Processor"/>
-        </reference> 
-        <reference name="parser-intent" target="parser-intent/intent">
-            <interface.java interface="org.ow2.frascati.tinfi.api.IntentHandler" />
-        </reference>
-        <reference name="processor-composite-intent" target="processor-composite-intent/intent">
-            <interface.java interface="org.ow2.frascati.tinfi.api.IntentHandler" />
-        </reference>
-        <reference name="processor-component-intent" target="processor-component-intent/intent">
-            <interface.java interface="org.ow2.frascati.tinfi.api.IntentHandler" />
-        </reference>
-        <reference name="processor-component-reference-intent" target="processor-component-reference-intent/intent">
-            <interface.java interface="org.ow2.frascati.tinfi.api.IntentHandler" />
-        </reference>
-        <reference name="processor-component-service-intent" target="processor-component-service-intent/intent">
-            <interface.java interface="org.ow2.frascati.tinfi.api.IntentHandler" />
-        </reference>
-        <reference name="processor-reference-intent" target="processor-reference-intent/intent">
-            <interface.java interface="org.ow2.frascati.tinfi.api.IntentHandler" />
-        </reference>
-        <reference name="processor-service-intent" target="processor-service-intent/intent">
-            <interface.java interface="org.ow2.frascati.tinfi.api.IntentHandler" />
-        </reference>
-        <reference name="processor-binding-intent" target="processor-binding-intent/intent">
-            <interface.java interface="org.ow2.frascati.tinfi.api.IntentHandler" />
-        </reference>
-        <reference name="processor-sca-binding-intent" target="processor-sca-binding-intent/intent">
-            <interface.java interface="org.ow2.frascati.tinfi.api.IntentHandler" />
-        </reference>
-    </component>
-
-    <component name="parser-intent">
-        <service name="intent">
-            <interface.java interface="org.ow2.frascati.tinfi.api.IntentHandler" />
-        </service>
-        <reference name="parser-intent-observer" target="frascati-service/parser-intent-observer">
-            <interface.java interface="org.easysoa.frascati.api.intent.ParserIntentObserverItf" />
-        </reference>
-        <implementation.java class="org.easysoa.frascati.intent.ParserIntent" />
-    </component>
-
-    <component name="processor-composite-intent">
-        <service name="intent">
-            <interface.java interface="org.ow2.frascati.tinfi.api.IntentHandler" />
-        </service>
-        <reference name="observer" target="observer-composite/processor-composite-observer">
-            <interface.java interface="org.easysoa.frascati.api.observer.ProcessorObserverItf"/>
-        </reference>
-        <implementation.java class="org.easysoa.frascati.intent.ProcessorCompositeIntent" />
-    </component>
-    
-    <component name="observer-composite">
-        <service name="processor-composite-observer">
-                <interface.java interface="org.easysoa.frascati.api.observer.ProcessorObserverItf"/>
-        </service>
-        <reference name="runtime-sca-importer" target="runtime-sca-importer/runtime-sca-importer">
-                <interface.java interface="org.easysoa.frascati.api.ScaImporterIntermediaryItf"/>
-        </reference>
-        <implementation.java class="org.easysoa.frascati.observer.ProcessorCompositeObserver" />
-    </component>
-        
-    <component name="processor-component-intent">
-        <service name="intent">
-            <interface.java interface="org.ow2.frascati.tinfi.api.IntentHandler" />
-        </service>
-        <reference name="observer" target="observer-component/processor-component-observer">
-            <interface.java interface="org.easysoa.frascati.api.observer.ProcessorObserverItf"/>
-        </reference>
-        <implementation.java class="org.easysoa.frascati.intent.ProcessorComponentIntent" />
-    </component>
-    
-    <component name="observer-component">
-        <service name="processor-component-observer">
-                <interface.java interface="org.easysoa.frascati.api.observer.ProcessorObserverItf"/>
-        </service>
-        <reference name="runtime-sca-importer" target="runtime-sca-importer/runtime-sca-importer">
-                <interface.java interface="org.easysoa.frascati.api.ScaImporterIntermediaryItf"/>
-        </reference>
-        <implementation.java class="org.easysoa.frascati.observer.ProcessorComponentObserver" />
-    </component>
-    
-    <component name="processor-component-reference-intent">
-        <service name="intent">
-            <interface.java interface="org.ow2.frascati.tinfi.api.IntentHandler" />
-        </service>
-        <reference name="observer" target="observer-component-reference/processor-component-reference-observer">
-            <interface.java interface="org.easysoa.frascati.api.observer.ProcessorObserverItf"/>
-        </reference>
-        <implementation.java class="org.easysoa.frascati.intent.ProcessorComponentReferenceIntent" />
-    </component>
-    
-    <component name="observer-component-reference">
-        <service name="processor-component-reference-observer">
-                <interface.java interface="org.easysoa.frascati.api.observer.ProcessorObserverItf"/>
-        </service>
-        <reference name="runtime-sca-importer" target="runtime-sca-importer/runtime-sca-importer">
-                <interface.java interface="org.easysoa.frascati.api.ScaImporterIntermediaryItf"/>
-        </reference>
-        <implementation.java class="org.easysoa.frascati.observer.ProcessorComponentReferenceObserver" />
-    </component>
-    
-    <component name="processor-component-service-intent">
-        <service name="intent">
-            <interface.java interface="org.ow2.frascati.tinfi.api.IntentHandler" />
-        </service>
-        <reference name="observer" target="observer-component-service/processor-component-service-observer">
-            <interface.java interface="org.easysoa.frascati.api.observer.ProcessorObserverItf"/>
-        </reference>
-        <implementation.java class="org.easysoa.frascati.intent.ProcessorComponentServiceIntent" />
-    </component>
-    
-    <component name="observer-component-service">
-        <service name="processor-component-service-observer">
-                <interface.java interface="org.easysoa.frascati.api.observer.ProcessorObserverItf"/>
-        </service>
-        <reference name="runtime-sca-importer" target="runtime-sca-importer/runtime-sca-importer">
-                <interface.java interface="org.easysoa.frascati.api.ScaImporterIntermediaryItf"/>
-        </reference>
-        <implementation.java class="org.easysoa.frascati.observer.ProcessorComponentServiceObserver" />
-    </component>
-    
-    <component name="processor-reference-intent">
-        <service name="intent">
-            <interface.java interface="org.ow2.frascati.tinfi.api.IntentHandler" />
-        </service>
-        <reference name="observer" target="observer-reference/processor-reference-observer">
-            <interface.java interface="org.easysoa.frascati.api.observer.ProcessorObserverItf"/>
-        </reference>
-        <implementation.java class="org.easysoa.frascati.intent.ProcessorReferenceIntent" />
-    </component>
-    
-    <component name="observer-reference">
-        <service name="processor-reference-observer">
-                <interface.java interface="org.easysoa.frascati.api.observer.ProcessorObserverItf"/>
-        </service>
-        <reference name="runtime-sca-importer" target="runtime-sca-importer/runtime-sca-importer">
-                <interface.java interface="org.easysoa.frascati.api.ScaImporterIntermediaryItf"/>
-        </reference>
-        <implementation.java class="org.easysoa.frascati.observer.ProcessorReferenceObserver" />
-    </component>
-    
-    <component name="processor-service-intent">
-        <service name="intent">
-            <interface.java interface="org.ow2.frascati.tinfi.api.IntentHandler" />
-        </service>
-        <reference name="observer" target="observer-service/processor-service-observer">
-            <interface.java interface="org.easysoa.frascati.api.observer.ProcessorObserverItf"/>
-        </reference>
-        <implementation.java class="org.easysoa.frascati.intent.ProcessorServiceIntent" />
-    </component>
-    
-    <component name="observer-service">
-        <service name="processor-service-observer">
-                <interface.java interface="org.easysoa.frascati.api.observer.ProcessorObserverItf"/>
-        </service>
-        <reference name="runtime-sca-importer" target="runtime-sca-importer/runtime-sca-importer">
-                <interface.java interface="org.easysoa.frascati.api.ScaImporterIntermediaryItf"/>
-        </reference>
-        <implementation.java class="org.easysoa.frascati.observer.ProcessorServiceObserver" />
-    </component>
-    
-    <component name="processor-binding-intent">
-        <service name="intent">
-            <interface.java interface="org.ow2.frascati.tinfi.api.IntentHandler" />
-        </service>
-        <reference name="observer" target="observer-binding/processor-binding-observer">
-            <interface.java interface="org.easysoa.frascati.api.observer.ProcessorObserverItf"/>
-        </reference>
-        <implementation.java class="org.easysoa.frascati.intent.ProcessorBindingIntent" />
-    </component>
-    
-    <component name="observer-binding">
-        <service name="processor-binding-observer">
-                <interface.java interface="org.easysoa.frascati.api.observer.ProcessorObserverItf"/>
-        </service>
-        <reference name="runtime-sca-importer" target="runtime-sca-importer/runtime-sca-importer">
-                <interface.java interface="org.easysoa.frascati.api.ScaImporterIntermediaryItf"/>
-        </reference>
-        <implementation.java class="org.easysoa.frascati.observer.ProcessorBindingObserver" />
-    </component>
-    
-    <component name="processor-sca-binding-intent">
-        <service name="intent">
-            <interface.java interface="org.ow2.frascati.tinfi.api.IntentHandler" />
-        </service>
-        <reference name="observer" target="observer-sca-binding/processor-sca-binding-observer">
-            <interface.java interface="org.easysoa.frascati.api.observer.ProcessorObserverItf"/>
-        </reference>
-        <implementation.java class="org.easysoa.frascati.intent.ProcessorScaBindingIntent" />
-    </component>
-    
-    <component name="observer-sca-binding">
-        <service name="processor-sca-binding-observer">
-                <interface.java interface="org.easysoa.frascati.api.observer.ProcessorObserverItf"/>
-        </service>
-        <reference name="runtime-sca-importer" target="runtime-sca-importer/runtime-sca-importer">
-                <interface.java interface="org.easysoa.frascati.api.ScaImporterIntermediaryItf"/>
-        </reference>
-        <implementation.java class="org.easysoa.frascati.observer.ProcessorScaBindingObserver" />
-    </component>    
-
-    <component name="runtime-sca-importer">    
-        <service name="runtime-sca-importer">
-                <interface.java interface="org.easysoa.frascati.api.ScaImporterIntermediaryItf"/>
-        </service>
-        <implementation.java class="org.easysoa.frascati.importer.RuntimeSCAImporter"/>
-    </component>
-   
+      
     <component name="frascati-service">
         <service name="frascati-service">
             <interface.java interface="org.easysoa.frascati.api.FraSCAtiServiceItf" />
-        </service>
-        <service name="parser-intent-observer">
-            <interface.java interface="org.easysoa.frascati.api.intent.ParserIntentObserverItf" />
         </service>
         <reference name="composite-manager">
             <interface.java interface="org.ow2.frascati.assembly.factory.api.CompositeManager" />
@@ -315,8 +44,8 @@
         <reference name="classloader-manager">
             <interface.java interface="org.ow2.frascati.assembly.factory.api.ClassLoaderManager"/>
         </reference>
-        <reference name="runtime-sca-importer" target="runtime-sca-importer/runtime-sca-importer">
-                <interface.java interface="org.easysoa.frascati.api.ScaImporterIntermediaryItf"/>
+        <reference name="runtime-sca-importer">
+            <interface.java interface="org.easysoa.frascati.api.ScaImporterIntermediaryItf"/>
         </reference>
         <implementation.java class="org.easysoa.frascati.FraSCAtiService" />
     </component>
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/resources/org/ow2/frascati/assembly/factory/AssemblyFactory.composite b/easysoa-registry/easysoa-frascati-service/src/main/resources/org/ow2/frascati/assembly/factory/AssemblyFactory.composite
index 55a64f0..0ec6468 100644
--- a/easysoa-registry/easysoa-frascati-service/src/main/resources/org/ow2/frascati/assembly/factory/AssemblyFactory.composite
+++ b/easysoa-registry/easysoa-frascati-service/src/main/resources/org/ow2/frascati/assembly/factory/AssemblyFactory.composite
@@ -19,77 +19,10 @@
  * Contact : easysoa-dev@googlegroups.com
  *-->
 <composite xmlns="http://www.osoa.org/xmlns/sca/1.0"
-    xmlns:easysoa="org/easysoa"
-    xmlns:starter="org/ow2/frascati/starter"
     name="org.ow2.frascati.assembly.factory.AssemblyFactory">  
   
-    <service name="easysoa-frascati-service" promote="easysoa/frascati-service">
-            <interface.java interface="org.easysoa.frascati.api.FraSCAtiServiceItf" />
-    </service>    
-    <reference name="easysoa-composite-parser" promote="easysoa/composite-parser">
-       <interface.java interface="org.ow2.frascati.parser.api.Parser" />
-    </reference> 
-     
-    <component name="easysoa">    
-         <service name="frascati-service">
-            <interface.java interface="org.easysoa.frascati.api.FraSCAtiServiceItf" />
-        </service> 
-        <service name="initializable">
-            <interface.java interface="org.ow2.frascati.starter.api.InitializableItf"/>
-        </service>
-        <reference name="composite-parser">
-            <interface.java interface="org.ow2.frascati.parser.api.Parser" />
-        </reference>  
-        <reference name="composite-manager" target="assembly-factory/composite-manager">
-            <interface.java interface="org.ow2.frascati.assembly.factory.api.CompositeManager" />
-        </reference>
-        <reference name="classloader-manager" target="assembly-factory/classloader-manager">
-            <interface.java interface="org.ow2.frascati.assembly.factory.api.ClassLoaderManager"/>
-        </reference>
-        <reference name="composite-processor" target="sca-composite/composite-processor">
-              <interface.java interface="org.ow2.frascati.assembly.factory.api.Processor"/>
-        </reference>
-        <reference name="component-processor" target="sca-component/component-processor">
-          <interface.java interface="org.ow2.frascati.assembly.factory.api.Processor"/>
-        </reference>
-        <reference name="component-service-processor" target="sca-component-service/component-service-processor">
-           <interface.java interface="org.ow2.frascati.assembly.factory.api.Processor"/>
-        </reference>
-        <reference name="component-reference-processor" target="sca-component-reference/component-reference-processor">
-           <interface.java interface="org.ow2.frascati.assembly.factory.api.Processor"/>
-        </reference>          
-        <reference name="composite-service-processor" target="sca-composite-service/composite-service-processor">
-            <interface.java interface="org.ow2.frascati.assembly.factory.api.Processor" />
-        </reference>
-        <reference name="composite-reference-processor" target="sca-composite-reference/composite-reference-processor">
-            <interface.java interface="org.ow2.frascati.assembly.factory.api.Processor" />
-        </reference>
-        <reference name="binding-processor" target="sca-binding/binding-processor">
-           <interface.java interface="org.ow2.frascati.assembly.factory.api.Processor"/>
-        </reference>  
-        <reference name="sca-binding-processor" target="sca-binding-sca/binding-processor">
-           <interface.java interface="org.ow2.frascati.assembly.factory.api.Processor"/>
-        </reference>
-        <implementation.composite name="easysoa:EasySOA.composite" />
-    </component>
+    <service name="runtime-sca-importer" promote="parser-event-weaver/runtime-sca-importer">
+       <interface.java interface="org.easysoa.frascati.api.ScaImporterIntermediaryItf"/>
+    </service>
     
-    <component name="starter-service">
-        <implementation.composite name="starter:StarterService.composite" />
-        <reference name="starter-container" target="starter-container/starter-container">
-            <interface.java interface="org.ow2.frascati.starter.api.StarterContainerItf" />
-        </reference>
-        <reference name="service-reference" target="assembly-factory/composite-manager">
-            <interface.java interface="org.ow2.frascati.assembly.factory.api.CompositeManager" />
-        </reference>
-    </component>
-
-    <component name="starter-container">
-        <implementation.java class="org.ow2.frascati.starter.core.StarterContainer" />
-        <service name="starter-container">
-            <interface.java interface="org.ow2.frascati.starter.api.StarterContainerItf" />
-        </service>
-        <reference multiplicity="0..n" name="initializables" target="easysoa/initializable">
-            <interface.java  interface="org.ow2.frascati.starter.api.InitializableItf" />
-        </reference>
-    </component>
 </composite>
\ No newline at end of file
diff --git a/easysoa-registry/easysoa-frascati-service/src/main/resources/org/ow2/frascati/starter/StarterService.composite b/easysoa-registry/easysoa-frascati-service/src/main/resources/org/ow2/frascati/starter/StarterService.composite
deleted file mode 100644
index 78b4227..0000000
--- a/easysoa-registry/easysoa-frascati-service/src/main/resources/org/ow2/frascati/starter/StarterService.composite
+++ /dev/null
@@ -1,43 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!-- 
- * EasySOA
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- *-->
-<composite xmlns="http://www.osoa.org/xmlns/sca/1.0" name="StarterService">
-
-    <reference name="service-reference" promote="starter/service-reference">
-        <interface.java interface="org.ow2.frascati.assembly.factory.api.CompositeManager" />
-    </reference>
-    <reference name="starter-container" promote="starter/starter-container">
-        <interface.java interface="org.ow2.frascati.starter.api.StarterContainerItf" />
-    </reference>
-
-    <component name="starter">
-        <implementation.java class="org.ow2.frascati.starter.core.Starter" />
-        <service name="starter">
-            <interface.java interface="org.ow2.frascati.starter.api.StarterItf" />
-        </service>
-        <reference name="service-reference">
-            <interface.java interface="org.ow2.frascati.assembly.factory.api.CompositeManager" />
-        </reference>
-        <reference name="starter-container">
-            <interface.java interface="org.ow2.frascati.starter.api.StarterContainerItf" />
-        </reference>
-    </component>
-
-</composite>
\ No newline at end of file
diff --git a/easysoa-registry/easysoa-registry-api/easysoa-remote-frascati-test/pom.xml b/easysoa-registry/easysoa-registry-api/easysoa-remote-frascati-test/pom.xml
index 321a7a0..ad4623b 100644
--- a/easysoa-registry/easysoa-registry-api/easysoa-remote-frascati-test/pom.xml
+++ b/easysoa-registry/easysoa-registry-api/easysoa-remote-frascati-test/pom.xml
@@ -24,6 +24,12 @@
        <scope>compile</scope>
     </dependency>
     <dependency>
+       <groupId>org.ow2.frascati.nuxeo</groupId>
+       <artifactId>frascati-nuxeo-service-api</artifactId>
+       <version>${frascati.version}</version>
+       <scope>provided</scope>
+    </dependency>
+    <dependency>
        <groupId>org.easysoa.registry.api</groupId>
        <artifactId>easysoa-remote-frascati</artifactId>
        <version>0.5-SNAPSHOT</version>
@@ -58,6 +64,11 @@
             <version>${model.version}</version>
         </dependency>
         <dependency>
+            <groupId>org.ow2.frascati.nuxeo</groupId>
+            <artifactId>frascati-isolated</artifactId>
+            <version>${frascati.version}</version>
+        </dependency>
+        <dependency>
             <groupId>org.apache.cxf</groupId>
             <artifactId>cxf-api</artifactId>
         </dependency>
diff --git a/easysoa-registry/easysoa-registry-api/easysoa-remote-frascati-test/src/main/java/org/easysoa/sca/frascati/test/RemoteFraSCAtiServiceProviderTest.java b/easysoa-registry/easysoa-registry-api/easysoa-remote-frascati-test/src/main/java/org/easysoa/sca/frascati/test/RemoteFraSCAtiServiceProviderTest.java
index 16737ee..5b5041c 100644
--- a/easysoa-registry/easysoa-registry-api/easysoa-remote-frascati-test/src/main/java/org/easysoa/sca/frascati/test/RemoteFraSCAtiServiceProviderTest.java
+++ b/easysoa-registry/easysoa-registry-api/easysoa-remote-frascati-test/src/main/java/org/easysoa/sca/frascati/test/RemoteFraSCAtiServiceProviderTest.java
@@ -23,12 +23,11 @@
 import java.io.FileFilter;
 import java.util.logging.Logger;
 
-import org.easysoa.sca.frascati.RemoteFraSCAtiServiceProvider;
+import org.ow2.frascati.isolated.FraSCAtiIsolated;
 
 public class RemoteFraSCAtiServiceProviderTest
 {
-    protected final Logger log = Logger
-            .getLogger(getClass().getCanonicalName());
+    protected final Logger log = Logger.getLogger(getClass().getCanonicalName());
 
     protected File remoteFrascatiLibDir;
     
@@ -46,18 +45,16 @@
 
         if (!remoteFrascatiLibDir.exists())
         {
-            log.warning("Enable to retrieve the 'easysoa-remote-frascati' directory");
+            log.warning("Unable to retrieve the 'easysoa-remote-frascati' directory");
             remoteFrascatiLibDir = null;
             return;
         }
-
         log.info("easysoa-remote-frascati directory found : "
                 + remoteFrascatiLibDir.getAbsolutePath());
 
         StringBuilder libs = new StringBuilder(
                 remoteFrascatiLibDir.getAbsolutePath()).append(sep).append(
-                        "resources").append(sep).append("frascati").append(
-                                sep).append("lib");
+                        "resources").append(sep).append("frascati");
         
         String remoteFrascatiLibDirPath = libs.toString();
         remoteFrascatiLibDir = new File(remoteFrascatiLibDirPath);
@@ -66,7 +63,7 @@
                 + remoteFrascatiLibDirPath );
         
         System.setProperty(
-                RemoteFraSCAtiServiceProvider.REMOTE_FRASCATI_LIBRARIES_BASEDIR,
+                FraSCAtiIsolated.FRASCATI_ISOLATED_BASEDIR_PROP,
                 remoteFrascatiLibDirPath);
     }
 
diff --git a/easysoa-registry/easysoa-registry-api/easysoa-remote-frascati-test/src/test/java/org/easysoa/frascati/remote/test/RemoteFraSCAtiTest.java b/easysoa-registry/easysoa-registry-api/easysoa-remote-frascati-test/src/test/java/org/easysoa/frascati/remote/test/RemoteFraSCAtiTest.java
index 0e5294f..c07a795 100644
--- a/easysoa-registry/easysoa-registry-api/easysoa-remote-frascati-test/src/test/java/org/easysoa/frascati/remote/test/RemoteFraSCAtiTest.java
+++ b/easysoa-registry/easysoa-registry-api/easysoa-remote-frascati-test/src/test/java/org/easysoa/frascati/remote/test/RemoteFraSCAtiTest.java
@@ -7,6 +7,7 @@
 import org.easysoa.sca.frascati.test.RemoteFraSCAtiServiceProviderTest;
 import org.junit.Before;
 import org.junit.Test;
+import org.ow2.frascati.isolated.FraSCAtiIsolated;
 
 import static org.junit.Assert.assertNotNull;
 
@@ -23,15 +24,8 @@
     public void setUp()
     {
         configure();
-
-        String libDir = System
-                .getProperty(RemoteFraSCAtiServiceProvider.REMOTE_FRASCATI_LIBRARIES_BASEDIR);
-
-        log.info(RemoteFraSCAtiServiceProvider.REMOTE_FRASCATI_LIBRARIES_BASEDIR
-                + " : " + libDir);
-
+        String libDir = System.getProperty(FraSCAtiIsolated.FRASCATI_ISOLATED_BASEDIR_PROP);
         assertNotNull(libDir);
-
         try
         {
             provider = new RemoteFraSCAtiServiceProvider(null);
@@ -39,7 +33,7 @@
         } catch (Exception e)
         {
             e.printStackTrace();
-            log.severe("Enable to create a remote frascati provider");
+            log.severe("Unable to create a remote frascati provider");
         }
         assertNotNull(provider);
     }
@@ -47,7 +41,7 @@
     @Test
     public void testTheProvider()
     {
-        assertNotNull(provider.getFraSCAtiService());
+        assertNotNull(provider.getFraSCAtiInNuxeoService());
     }
 
 }
diff --git a/easysoa-registry/easysoa-registry-api/easysoa-remote-frascati/pom.xml b/easysoa-registry/easysoa-registry-api/easysoa-remote-frascati/pom.xml
index 3dc05b9..4ceefb6 100644
--- a/easysoa-registry/easysoa-registry-api/easysoa-remote-frascati/pom.xml
+++ b/easysoa-registry/easysoa-registry-api/easysoa-remote-frascati/pom.xml
@@ -21,6 +21,11 @@
        <scope>provided</scope>
     </dependency>
     <dependency>
+       <groupId>org.ow2.frascati.nuxeo</groupId>
+       <artifactId>frascati-isolated</artifactId>
+       <version>${frascati.version}</version>
+    </dependency>
+    <dependency>
       <groupId>commons-logging</groupId>
       <artifactId>commons-logging</artifactId>
     </dependency>
@@ -1281,7 +1286,22 @@
                   <groupId>org.easysoa.frascati</groupId>
                   <artifactId>easysoa-frascati-service</artifactId>
                   <version>${easysoa.version}</version>
-                </artifactItem>
+                </artifactItem>                
+			    <artifactItem>
+			       <groupId>org.ow2.frascati.nuxeo</groupId>
+			       <artifactId>frascati-nuxeo-service</artifactId>
+			       <version>${frascati.version}</version>
+			    </artifactItem>              
+			    <artifactItem>
+			       <groupId>org.ow2.frascati.nuxeo</groupId>
+			       <artifactId>frascati-event-parser</artifactId>
+			       <version>${frascati.version}</version>
+			    </artifactItem> 
+ 				<artifactItem>
+			        <groupId>org.apache.tuscany.sca</groupId>
+			        <artifactId>tuscany-sca-api</artifactId>
+			        <version>1.6.2</version>
+ 				</artifactItem>
               </artifactItems>
             </configuration>
           </execution>
diff --git a/easysoa-registry/easysoa-registry-api/easysoa-remote-frascati/src/main/java/org/easysoa/sca/frascati/RemoteFraSCAtiServiceProvider.java b/easysoa-registry/easysoa-registry-api/easysoa-remote-frascati/src/main/java/org/easysoa/sca/frascati/RemoteFraSCAtiServiceProvider.java
index dd85f42..5a410e6 100644
--- a/easysoa-registry/easysoa-registry-api/easysoa-remote-frascati/src/main/java/org/easysoa/sca/frascati/RemoteFraSCAtiServiceProvider.java
+++ b/easysoa-registry/easysoa-registry-api/easysoa-remote-frascati/src/main/java/org/easysoa/sca/frascati/RemoteFraSCAtiServiceProvider.java
@@ -20,13 +20,9 @@
 package org.easysoa.sca.frascati;
 
 import java.io.File;
-import java.io.FilenameFilter;
 import java.lang.management.ManagementFactory;
-import java.net.URL;
-import java.net.URLClassLoader;
 import java.util.Set;
 import java.util.logging.Level;
-import java.util.logging.Logger;
 
 import javax.management.InstanceNotFoundException;
 import javax.management.MBeanRegistrationException;
@@ -35,30 +31,16 @@
 import javax.management.ObjectName;
 
 import org.easysoa.frascati.api.FraSCAtiServiceItf;
-import org.easysoa.frascati.api.FraSCAtiServiceProviderItf;
+import org.ow2.frascati.isolated.FraSCAtiIsolated;
+import org.ow2.frascati.nuxeo.api.FraSCAtiInNuxeoServiceProviderItf;
 
 /**
  * @author jguillemotte
  * 
  */
-public class RemoteFraSCAtiServiceProvider implements
-        FraSCAtiServiceProviderItf
+public class RemoteFraSCAtiServiceProvider extends FraSCAtiIsolated implements
+        FraSCAtiInNuxeoServiceProviderItf<FraSCAtiServiceItf>
 {
-    
-    public static final String REMOTE_FRASCATI_LIBRARIES_BASEDIR = 
-            "org.easysoa.remote.frascati.libraries.basedir";
-    
-    private static Logger log = Logger.getLogger(
-            RemoteFraSCAtiServiceProvider.class.getCanonicalName());
-    
-    private FraSCAtiServiceItf frascatiService;
-    private Object frascati;
-    private UpdatableURLClassLoader icl;
-    
-    private Class<?> componentClass = null;
-    private Class<?> lifecycleClass = null;
-    private Object factory = null;
-    
     /**
      * Constructor 
      * 
@@ -71,339 +53,67 @@
      */
     public RemoteFraSCAtiServiceProvider(File librariesDirectory) throws Exception
     {
-        // Required for Frascati Web explorer
-        // If this property is not set, the following error is throwed '<sca:component name="WebExplorer"> - <sca:implementation> must be defined'
-        // See discussion at https://groups.google.com/forum/#!msg/easysoa-dev/LE66ptRLL3A/kSSzJrIMzMcJ
-        System.setProperty("org.ow2.frascati.bootstrap", "org.ow2.frascati.bootstrap.FraSCAtiWebExplorer");
+        super(librariesDirectory,ClassLoader.getSystemClassLoader());        
+    }
+
+    /** 
+     * {@inheritDoc}
+     *
+     * @see org.ow2.frascati.nuxeo.api.FraSCAtiInNuxeoServiceProviderItf#getFraSCAtiInNuxeoService()
+     */
+    @Override
+    public FraSCAtiServiceItf getFraSCAtiInNuxeoService()
+    {
+       try
+       {
+           return getService(FraSCAtiServiceItf.class, "frascati-service", 
+                "org.ow2.frascati.FraSCAti/easysoa");
         
-        if(librariesDirectory == null)
+        } catch (Exception e)
         {
-            String librariesDirectoryProp = System.getProperty(
-                    REMOTE_FRASCATI_LIBRARIES_BASEDIR);
-            
-            if(librariesDirectoryProp == null 
-                    || !(librariesDirectory = new File(
-                            librariesDirectoryProp)).exists())
-            {
-                throw new InstantiationException("Enable to instantiate a new" +
-                " remote FraSCAti instance : no libraries directory found" );
-            }
+            logger.log(Level.WARNING,e.getMessage(),e);
         }
-        File[] libraries = librariesDirectory.listFiles(
-                new FilenameFilter(){
-                    @Override
-                    public boolean accept(File arg0, String arg1)
-                    {
-                        if(arg1.endsWith(".jar"))
-                        {
-                            return true;
-                        }
-                        return false;
-                    }
-                    
-                });
-        
-        //Define a new URLClassLoader using a parent which allow to find shared classes
-        icl = new UpdatableURLClassLoader(Thread.currentThread().getContextClassLoader());
-        if(libraries != null)
-        {
-            for(File library : libraries)
-            {
-               icl.addURL(library.toURI().toURL()); 
-            }
-        }
-        Class<?> frascatiClass = icl.loadClass("org.ow2.frascati.FraSCAti");
-        
-        ClassLoader current = Thread.currentThread().getContextClassLoader();
-        Thread.currentThread().setContextClassLoader(icl);
-        
+    return null;
+    }
+    
+    /**
+     * Stop the remote FraSCAti service
+     */
+    public void stopFraSCAtiService()
+    {
+        MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
+        ObjectName name;
         try
         {
-        frascati = frascatiClass.getDeclaredMethod("newFraSCAti").invoke(null);
-//                ,new Class<?>[]{ClassLoader.class}).invoke(null,
-//                        new Object[]{icl});
-        } catch(Exception e)
-        {
-            throw e;
-        } finally
-        {
-            Thread.currentThread().setContextClassLoader(current);
-        }
-        Class<?> managerClass = icl.loadClass(
-                "org.ow2.frascati.assembly.factory.api.CompositeManager");
-        
-        lifecycleClass = icl.loadClass(
-                "org.objectweb.fractal.api.control.LifeCycleController");
-        
-        componentClass = icl.loadClass(
-                "org.objectweb.fractal.api.Component");
-        
-        Object manager = frascatiClass.getDeclaredMethod(
-                "getCompositeManager").invoke(frascati);
-        
-        Object component = managerClass.getDeclaredMethod(
-                "getTopLevelDomainComposite").invoke(manager);
-        
-        factory = getComponent(component,
-                "org.ow2.frascati.FraSCAti/assembly-factory");
-       
-        frascatiService = (FraSCAtiServiceItf)
-                frascatiClass.getDeclaredMethod("getService",new Class<?>[]{
-                        componentClass, 
-                        String.class,
-                        Class.class})
-                .invoke(frascati, new Object[]{
-                        factory,
-                        "easysoa-frascati-service", 
-                        FraSCAtiServiceItf.class});
-    }
-    
-    
-    /**
-     * Find a Fractal Component using a parent of it and its path
-     * 
-     * @param currentComponent
-     *          a parent of the search component
-     * @param componentPath
-     *          the path of the component
-     * @return
-     *          the component if it has been found. Null otherwise
-     * @throws Exception
-     */
-    private Object getComponent(Object currentComponent,
-            String componentPath) throws Exception
-    {
-        String[] componentPathElements = componentPath.split("/");
-        String lookFor = componentPathElements[0];
-        String next = null;
-        
-        if(componentPathElements.length>1)
-        {
-            int n = 1;
-            StringBuilder nextSB = new StringBuilder();
-            for(;n<componentPathElements.length;n++)
+            name = new ObjectName("SCA domain:name0=*,*");
+            Set<ObjectName> names = mbs.queryNames(name, name);
+            for (ObjectName objectName : names)
             {
-                nextSB.append(componentPathElements[n]);
-                if(n<componentPathElements.length - 1)
-                {
-                    nextSB.append("/");
-                }
+                mbs.unregisterMBean(objectName);
             }
-            next = nextSB.toString();
-        }  
-       
-       Class<?> componentClass = icl.loadClass(
-               "org.objectweb.fractal.api.Component");
-       
-       Class<?> contentControllerClass = icl.loadClass(
-               "org.objectweb.fractal.api.control.ContentController");
-       
-       Class<?> nameControllerClass = icl.loadClass(
-               "org.objectweb.fractal.api.control.NameController");
-      
-       Object contentController = componentClass.getDeclaredMethod(
-               "getFcInterface",new Class<?>[]{String.class}).invoke(
-                       currentComponent,"content-controller");
-     
-       Object[] subComponents = (Object[]) 
-               contentControllerClass.getDeclaredMethod(
-                       "getFcSubComponents",(Class<?>[])null).invoke(
-                               contentController,(Object[])null);
-       
-        if(subComponents == null)
+            mbs.unregisterMBean(new ObjectName(
+                    "org.ow2.frascati.jmx:name=FrascatiJmx"));
+        } catch (MalformedObjectNameException e)
         {
-            return null;
+            // e.printStackTrace();
+        } catch (NullPointerException e)
+        {
+            // e.printStackTrace();
+        } catch (MBeanRegistrationException e)
+        {
+            // e.printStackTrace();
+        } catch (InstanceNotFoundException e)
+        {
+            // e.printStackTrace();
         }
-        for(Object o : subComponents)
+        try
         {
-            Object nameController = componentClass.getDeclaredMethod("getFcInterface",
-                    new Class<?>[]{String.class}).invoke(o,"name-controller");
+            super.stop();
             
-            String name = (String) nameControllerClass.getDeclaredMethod("getFcName",
-                   (Class<?>[])null).invoke(nameController,(Object[])null);
-            
-            if(lookFor.equals(name))
-            {
-                if(next == null || next.length() ==0)
-                {
-                    return o;
-                } else 
-                {
-                    return getComponent(o,next);
-                }
-            }
-        }
-        return null;
-    }
-    
-    public FraSCAtiServiceItf getFraSCAtiService() {
-
-        return frascatiService;
-    }
-    
-    /**
-     * @throws Exception 
-     * 
-     */
-    public void stopFraSCAtiService() throws Exception
-    {
-            MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
-            ObjectName name;
-            try
-            {
-                name = new ObjectName("SCA domain:name0=*,*");
-                Set<ObjectName> names = mbs.queryNames(name, name);
-                for (ObjectName objectName : names)
-                {
-                    mbs.unregisterMBean(objectName);
-                }
-                mbs.unregisterMBean(new ObjectName(
-                        "org.ow2.frascati.jmx:name=FrascatiJmx"));
-            } catch (MalformedObjectNameException e)
-            {
-                // e.printStackTrace();
-            } catch (NullPointerException e)
-            {
-                // e.printStackTrace();
-            } catch (MBeanRegistrationException e)
-            {
-                // e.printStackTrace();
-            } catch (InstanceNotFoundException e)
-            {
-                // e.printStackTrace();
-            }
-            
-            Object lifeCycleController = componentClass.getDeclaredMethod(
-                    "getFcInterface", new Class<?>[]{String.class}).invoke(
-                            factory,new Object[]{"lifecycle-controller"});
-            
-            lifecycleClass.getDeclaredMethod("stopFc").invoke(
-                    lifeCycleController);
-            
-            frascatiService = null;
-            frascati = null;
-            icl = null;
-            Runtime.getRuntime().runFinalization();
-            System.gc();
-        }
-    
-    /**
-     * An URLClassLoader which allow to use the addURL method
-     */
-    private class UpdatableURLClassLoader extends URLClassLoader
-    {
-        /**
-         * @param urls
-         * @param parent
-         * @param factory
-         */
-        public UpdatableURLClassLoader(ClassLoader parent)
+        } catch (Exception e)
         {
-            super(new URL[0], parent);
+            logger.log(Level.WARNING,e.getMessage(),e);
         }
-
-        /**
-         * @param url
-         */
-        @Override
-        public void addURL(URL url)
-        {
-            //log.debug("adding url to load : " + url);
-            super.addURL(url);
-        }
-        
-        /**
-         * {@inheritDoc}
-         * 
-         * @see java.lang.ClassLoader#loadClass(java.lang.String, boolean)
-         */
-        protected synchronized Class<?> loadClass(String name, boolean resolve)
-                throws ClassNotFoundException
-        {
-            // First, check if the class has already been loaded
-
-            boolean regular = false;
-            Class<?> clazz = findLoadedClass(name);
-
-            if (clazz != null)
-            {
-                return clazz;
-            }
-            if (name.startsWith("java.") || name.startsWith("javax.")
-                    || name.startsWith("org.w3c.")
-                    || name.startsWith("org.apache.log4j"))
-            {
-                regular = true;
-                if (getParent() != null)
-                {
-                    try
-                    {
-                        clazz = getParent().loadClass(name);
-                        
-                    } catch (ClassNotFoundException e)
-                    {
-                        log.log(Level.CONFIG,
-                                "'" + name + "' class not found using the parent classloader");
-                    }
-                }
-            }
-            if (clazz == null)
-            {
-                try
-                {
-                    clazz = findClass(name);
-
-                } catch (ClassNotFoundException e)
-                {
-                    log.log(Level.CONFIG,
-                            "'" + name  + "' class not found using the classloader classpath");
-                }
-                if (clazz == null && !regular && getParent() != null)
-                {
-                        clazz = getParent().loadClass(name);
-                }
-            }
-            if (clazz == null)
-            {
-                throw new ClassNotFoundException(name);
-            }
-            if (resolve)
-            {
-                resolveClass(clazz);
-            }
-            return clazz;
-        }
-                     
-        /**
-         * {@inheritDoc}
-         * 
-         * @see java.lang.ClassLoader#getResource(java.lang.String)
-         */
-        @Override
-        public URL getResource(String name) 
-        {
-            URL url = null;
-            boolean regular = false;
-            
-            if (name.startsWith("java.") || name.startsWith("javax.")
-                    || name.startsWith("org.w3c.")
-                    || name.startsWith("org.apache.log4j"))
-            {
-                regular = true;
-                if (getParent() != null)
-                {
-                   url = getParent().getResource(name);
-                }
-            } 
-            if(url == null)
-            {
-                url = findResource(name);
-            }
-            if (url==null && !regular && getParent() != null)
-            {
-               url = getParent().getResource(name);
-            }
-            return url;
-        }
+        logger.log(Level.INFO,"Remote FraSCAti Service stopped");
     }
 }
diff --git a/easysoa-registry/easysoa-registry-core/src/main/java/org/easysoa/registry/frascati/EasySOAApiFraSCAti.java b/easysoa-registry/easysoa-registry-core/src/main/java/org/easysoa/registry/frascati/EasySOAApiFraSCAti.java
index 6d85d97..1b5f950 100644
--- a/easysoa-registry/easysoa-registry-core/src/main/java/org/easysoa/registry/frascati/EasySOAApiFraSCAti.java
+++ b/easysoa-registry/easysoa-registry-core/src/main/java/org/easysoa/registry/frascati/EasySOAApiFraSCAti.java
@@ -81,11 +81,11 @@
     protected EasySOAApiFraSCAti() {
  /*       try {
             //remoteProvider = new RemoteFraSCAtiServiceProvider(null);
-            //this.frascati = remoteProvider.getFraSCAtiService();
+            //this.frascati = remoteProvider.getFraSCAtiInNuxeoService();
             
             // TODO : To use the Nuxeo embedded FraSCAti SCA importer
             // Must be refactored to have the choice to use a remote FraSCAti SCA importer or an embedded FraSCAti importer
-            this.frascati = Framework.getService(FraSCAtiServiceProviderItf.class).getFraSCAtiService();
+            this.frascati = Framework.getService(FraSCAtiInNuxeoServiceProviderItf.class).getFraSCAtiInNuxeoService();
         }
         catch (Exception e) {
             e.printStackTrace();
diff --git a/easysoa-registry/easysoa-registry-core/src/main/java/org/easysoa/registry/frascati/FraSCAtiApp.java b/easysoa-registry/easysoa-registry-core/src/main/java/org/easysoa/registry/frascati/FraSCAtiApp.java
index 18a8aab..624e6d2 100644
--- a/easysoa-registry/easysoa-registry-core/src/main/java/org/easysoa/registry/frascati/FraSCAtiApp.java
+++ b/easysoa-registry/easysoa-registry-core/src/main/java/org/easysoa/registry/frascati/FraSCAtiApp.java
@@ -49,7 +49,7 @@
 		return appPath;
 	}
 
-	public FraSCAtiRegistryServiceBase getFraSCAtiService() {
+	public FraSCAtiRegistryServiceBase getFraSCAtiInNuxeoService() {
 		return fraSCAtiService;
 	}
 
diff --git a/easysoa-registry/easysoa-registry-core/src/main/java/org/easysoa/registry/frascati/FraSCAtiRegistryServiceBase.java b/easysoa-registry/easysoa-registry-core/src/main/java/org/easysoa/registry/frascati/FraSCAtiRegistryServiceBase.java
index cfbdf84..e9f843c 100644
--- a/easysoa-registry/easysoa-registry-core/src/main/java/org/easysoa/registry/frascati/FraSCAtiRegistryServiceBase.java
+++ b/easysoa-registry/easysoa-registry-core/src/main/java/org/easysoa/registry/frascati/FraSCAtiRegistryServiceBase.java
@@ -28,9 +28,9 @@
 import org.apache.commons.logging.LogFactory;
 import org.eclipse.stp.sca.Composite;
 
-import org.easysoa.frascati.FraSCAtiServiceException;
+import org.ow2.frascati.nuxeo.exception.FraSCAtiInNuxeoServiceException;
 import org.easysoa.frascati.api.FraSCAtiServiceItf;
-import org.easysoa.frascati.api.FraSCAtiServiceProviderItf;
+import org.ow2.frascati.nuxeo.api.FraSCAtiInNuxeoServiceProviderItf;
 import org.nuxeo.runtime.api.Framework;
 
 /**
@@ -111,7 +111,7 @@
 		try {
 			composite = frascati.processComposite(compositeUrl.toString(), mode,scaZipUrls);
 		} 
-		catch (FraSCAtiServiceException fe) { 
+		catch (FraSCAtiInNuxeoServiceException fe) { 
 			log.error("The number of checking errors is equals to " + frascati.getErrors());
 			log.error("The number of checking warnings is equals to " + frascati.getWarnings());
 			log.error(fe);	
@@ -164,9 +164,10 @@
     private void checkFraSCatiService() {
         if (frascati == null) {
             try {
-                this.frascati = Framework.getService(FraSCAtiServiceProviderItf.class).getFraSCAtiService();
+                this.frascati = (FraSCAtiServiceItf) Framework.getService(
+                        FraSCAtiInNuxeoServiceProviderItf.class).getFraSCAtiInNuxeoService();
             } catch (Exception e) {
-                log.error("Failed to fetch FraSCAtiServiceProviderItf", e);
+                log.error("Failed to fetch FraSCAtiInNuxeoServiceProviderItf", e);
             }
         }
     }
diff --git a/easysoa-registry/easysoa-registry-core/src/main/java/org/easysoa/validation/ServiceValidatorComponent.java b/easysoa-registry/easysoa-registry-core/src/main/java/org/easysoa/validation/ServiceValidatorComponent.java
index 35faf33..49531d3 100644
--- a/easysoa-registry/easysoa-registry-core/src/main/java/org/easysoa/validation/ServiceValidatorComponent.java
+++ b/easysoa-registry/easysoa-registry-core/src/main/java/org/easysoa/validation/ServiceValidatorComponent.java
@@ -34,7 +34,7 @@
 import org.easysoa.doctypes.Service;
 import org.easysoa.doctypes.Workspace;
 import org.easysoa.frascati.api.FraSCAtiServiceItf;
-import org.easysoa.frascati.api.FraSCAtiServiceProviderItf;
+import org.ow2.frascati.nuxeo.api.FraSCAtiInNuxeoServiceProviderItf;
 import org.easysoa.services.DeletedDocumentFilter;
 import org.easysoa.services.DocumentService;
 import org.easysoa.services.ServiceValidationService;
@@ -116,9 +116,10 @@
     public ExchangeReplayController getExchangeReplayController() {
         if(exchangeReplayController == null){
             try{
-                FraSCAtiServiceItf frascati = Framework.getLocalService(FraSCAtiServiceProviderItf.class).getFraSCAtiService();
+                FraSCAtiServiceItf frascati = (FraSCAtiServiceItf) Framework.getService(
+                        FraSCAtiInNuxeoServiceProviderItf.class).getFraSCAtiInNuxeoService();
                 //this.exchangeReplayController = frascati.getService("httpDiscoveryProxy/scheduledValidationReplayEngineComponent", "scheduledValidationReplayEngineService", ExchangeReplayController.class);
-                this.exchangeReplayController = frascati.getService("handlerManager/handlerManagerServiceBaseComp/scheduledValidationReplayEngineComponent", "scheduledValidationReplayEngineService", ExchangeReplayController.class);
+                this.exchangeReplayController = frascati.getService("handlerManager", "scheduledValidationReplayEngineService", ExchangeReplayController.class);
             }
             catch(Exception ex){
                 log.error("Unable to get the replayEngineService from FraSCAti", ex);
diff --git a/easysoa-registry/easysoa-registry-core/src/test/java/org/easysoa/sca/frascati/ApiTestHelperBase.java b/easysoa-registry/easysoa-registry-core/src/test/java/org/easysoa/sca/frascati/ApiTestHelperBase.java
index 930a2fe..66c2375 100644
--- a/easysoa-registry/easysoa-registry-core/src/test/java/org/easysoa/sca/frascati/ApiTestHelperBase.java
+++ b/easysoa-registry/easysoa-registry-core/src/test/java/org/easysoa/sca/frascati/ApiTestHelperBase.java
@@ -24,7 +24,7 @@
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
-import org.easysoa.frascati.FraSCAtiServiceException;
+import org.ow2.frascati.nuxeo.exception.FraSCAtiInNuxeoServiceException;
 import org.easysoa.frascati.api.FraSCAtiServiceItf;
 import org.easysoa.registry.frascati.EasySOAApiFraSCAti;
 import org.easysoa.sca.frascati.test.RemoteFraSCAtiServiceProviderTest;
@@ -57,7 +57,7 @@
                     "src/test/resources/RestApiMock.composite", FraSCAtiServiceItf.all);
             componentList.add(composite.getName());
             
-        } catch (FraSCAtiServiceException e) {
+        } catch (FraSCAtiInNuxeoServiceException e) {
             
             e.printStackTrace();
         }
diff --git a/easysoa-registry/easysoa-registry-core/src/test/java/org/easysoa/sca/frascati/RestApiFrascatiImportServiceTest.java b/easysoa-registry/easysoa-registry-core/src/test/java/org/easysoa/sca/frascati/RestApiFrascatiImportServiceTest.java
index cf0e923..175d504 100644
--- a/easysoa-registry/easysoa-registry-core/src/test/java/org/easysoa/sca/frascati/RestApiFrascatiImportServiceTest.java
+++ b/easysoa-registry/easysoa-registry-core/src/test/java/org/easysoa/sca/frascati/RestApiFrascatiImportServiceTest.java
@@ -32,7 +32,7 @@
 import org.apache.cxf.BusFactory;
 import org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine;
 import org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory;
-import org.easysoa.frascati.FraSCAtiServiceException;
+import org.ow2.frascati.nuxeo.exception.FraSCAtiInNuxeoServiceException;
 import org.easysoa.frascati.api.FraSCAtiServiceItf;
 import org.easysoa.records.ExchangeRecord;
 import org.easysoa.registry.frascati.EasySOAApiFraSCAti;
@@ -222,11 +222,11 @@
 
     /**
      * Check the recorded exchanges
-     * @throws FraSCAtiServiceException 
+     * @throws FraSCAtiInNuxeoServiceException 
      * 
      * @throws IOException
      */
-    public static void checkExchanges(String toLookForInContent) throws FraSCAtiServiceException {
+    public static void checkExchanges(String toLookForInContent) throws FraSCAtiInNuxeoServiceException {
     	log.debug("checkExchanges() - composite restApiMock : " + frascati.getComposite("RestApiMock"));
         List<ExchangeRecord> records = frascati.getService("RestApiMock", "RecordsProvider", RecordsProvider.class).getRecords();
         
diff --git a/easysoa-registry/easysoa-registry-frascati/src/main/java/org/easysoa/registry/frascati/FraSCAtiAppComponent.java b/easysoa-registry/easysoa-registry-frascati/src/main/java/org/easysoa/registry/frascati/FraSCAtiAppComponent.java
index 9000fdc..d73dc4a 100644
--- a/easysoa-registry/easysoa-registry-frascati/src/main/java/org/easysoa/registry/frascati/FraSCAtiAppComponent.java
+++ b/easysoa-registry/easysoa-registry-frascati/src/main/java/org/easysoa/registry/frascati/FraSCAtiAppComponent.java
@@ -9,7 +9,7 @@
 import java.util.Map;
 
 import org.apache.log4j.Logger;
-import org.easysoa.frascati.FraSCAtiServiceException;
+import org.ow2.frascati.nuxeo.exception.FraSCAtiInNuxeoServiceException;
 import org.easysoa.frascati.api.FraSCAtiServiceItf;
 import org.nuxeo.ecm.core.api.ClientException;
 import org.nuxeo.ecm.core.event.Event;
@@ -94,7 +94,7 @@
             if (frascatiService != null && compositeToRemove != null) {
                 try {
                     frascatiService.remove(compositeToRemove);
-                } catch (FraSCAtiServiceException e) {
+                } catch (FraSCAtiInNuxeoServiceException e) {
                     logger.error("Failed to stop and remove application " + app.name, e);
                 }
             }
@@ -110,7 +110,7 @@
                     FraSCAtiServiceItf.all, appClasspath).getName();
             compositeInstances.put(app, newCompositeName);
             logger.info("Successfuly started app " + app.name);
-        } catch (FraSCAtiServiceException e) {
+        } catch (FraSCAtiInNuxeoServiceException e) {
             logger.error("Failed to load app " + app.name + " (composite " + app.compositeName
                     + " from jar '" + appJar.getAbsolutePath() + "')", e);
         } catch (MalformedURLException e) {
diff --git a/easysoa-registry/easysoa-registry-frascati/src/test/java/org/easysoa/registry/frascati/FraSCAtiServiceReadScaTest.java b/easysoa-registry/easysoa-registry-frascati/src/test/java/org/easysoa/registry/frascati/FraSCAtiServiceReadScaTest.java
index 601dfa4..849c6e8 100644
--- a/easysoa-registry/easysoa-registry-frascati/src/test/java/org/easysoa/registry/frascati/FraSCAtiServiceReadScaTest.java
+++ b/easysoa-registry/easysoa-registry-frascati/src/test/java/org/easysoa/registry/frascati/FraSCAtiServiceReadScaTest.java
@@ -28,7 +28,7 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.easysoa.frascati.api.FraSCAtiServiceItf;
-import org.easysoa.frascati.api.FraSCAtiServiceProviderItf;
+import org.ow2.frascati.nuxeo.api.FraSCAtiInNuxeoServiceProviderItf;
 import org.eclipse.stp.sca.Composite;
 import org.junit.Assert;
 import org.junit.Before;
@@ -57,7 +57,7 @@
     
     @Before
     public void setUp(){
-        frascatiService = (FraSCAtiServiceItf) Framework.getLocalService(FraSCAtiServiceProviderItf.class).getFraSCAtiService();
+        frascatiService = (FraSCAtiServiceItf) Framework.getLocalService(FraSCAtiInNuxeoServiceProviderItf.class).getFraSCAtiInNuxeoService();
         assertNotNull(frascatiService);
     }
     
diff --git a/easysoa-registry/easysoa-registry-frascati/src/test/java/org/easysoa/sca/proxy/DiscoveryProxyAppTest.java b/easysoa-registry/easysoa-registry-frascati/src/test/java/org/easysoa/sca/proxy/DiscoveryProxyAppTest.java
index 5a243ea..5ae5c6d 100644
--- a/easysoa-registry/easysoa-registry-frascati/src/test/java/org/easysoa/sca/proxy/DiscoveryProxyAppTest.java
+++ b/easysoa-registry/easysoa-registry-frascati/src/test/java/org/easysoa/sca/proxy/DiscoveryProxyAppTest.java
@@ -15,7 +15,7 @@
 import org.apache.http.impl.client.DefaultHttpClient;
 import org.easysoa.EasySOAConstants;
 import org.easysoa.frascati.api.FraSCAtiServiceItf;
-import org.easysoa.frascati.api.FraSCAtiServiceProviderItf;
+import org.ow2.frascati.nuxeo.api.FraSCAtiInNuxeoServiceProviderItf;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -46,7 +46,7 @@
     
     @Before
     public void setUp() {
-        frascatiService = (FraSCAtiServiceItf) Framework.getLocalService(FraSCAtiServiceProviderItf.class).getFraSCAtiService();
+        frascatiService = (FraSCAtiServiceItf) Framework.getLocalService(FraSCAtiInNuxeoServiceProviderItf.class).getFraSCAtiInNuxeoService();
     }
     
     @Test
diff --git a/easysoa-registry/easysoa-registry-rest-miner/pom.xml b/easysoa-registry/easysoa-registry-rest-miner/pom.xml
index dfa0026..97c8d2b 100644
--- a/easysoa-registry/easysoa-registry-rest-miner/pom.xml
+++ b/easysoa-registry/easysoa-registry-rest-miner/pom.xml
@@ -56,7 +56,36 @@
       <groupId>org.nuxeo</groupId>
       <artifactId>nuxeo-frascati</artifactId>
     </dependency>
-
+    <dependency>
+       <groupId>org.ow2.frascati.nuxeo</groupId>
+       <artifactId>frascati-nuxeo</artifactId>
+       <version>${frascati.version}</version>
+       <scope>provided</scope>
+    </dependency>  
+    <dependency>
+       <groupId>org.ow2.frascati.nuxeo</groupId>
+       <artifactId>frascati-nuxeo-api</artifactId>
+       <version>${frascati.version}</version>
+       <scope>provided</scope>
+    </dependency>  
+    <dependency>
+       <groupId>org.ow2.frascati.nuxeo</groupId>
+       <artifactId>frascati-nuxeo-service-api</artifactId>
+       <version>${frascati.version}</version>
+       <scope>provided</scope>
+    </dependency>
+	<dependency>
+		<groupId>org.ow2.frascati.nuxeo</groupId>
+		<artifactId>frascati-service-bridge-api</artifactId>
+		<version>${frascati.version}</version>
+		<scope>provided</scope>
+	</dependency>
+	<dependency>
+		<groupId>org.ow2.frascati.nuxeo</groupId>
+		<artifactId>frascati-service-bridge</artifactId>
+		<version>${frascati.version}</version>
+		<scope>provided</scope>
+	</dependency>
 	<!-- Problem with this, if present, duplicated problem during composite start -->
 	<!-- else, if no present, missing velocity frascati generated classes -->
 	<!--<dependency>
@@ -116,8 +145,6 @@
       <artifactId>mockito-all</artifactId>
       <scope>test</scope>
     </dependency>
-    
-    
   </dependencies>
 
 	<build>
diff --git a/easysoa-registry/easysoa-registry-rest-miner/src/main/java/org/easysoa/records/filters/ExchangeRecordServletFilterEventReceiver.java b/easysoa-registry/easysoa-registry-rest-miner/src/main/java/org/easysoa/records/filters/ExchangeRecordServletFilterEventReceiver.java
index f60e107..3ebdc66 100644
--- a/easysoa-registry/easysoa-registry-rest-miner/src/main/java/org/easysoa/records/filters/ExchangeRecordServletFilterEventReceiver.java
+++ b/easysoa-registry/easysoa-registry-rest-miner/src/main/java/org/easysoa/records/filters/ExchangeRecordServletFilterEventReceiver.java
@@ -6,7 +6,7 @@
 import org.apache.log4j.Logger;
 import org.easysoa.exchangehandler.HandlerManager;
 import org.easysoa.frascati.api.FraSCAtiServiceItf;
-import org.easysoa.frascati.api.FraSCAtiServiceProviderItf;
+import org.ow2.frascati.nuxeo.api.FraSCAtiInNuxeoServiceProviderItf;
 import org.easysoa.records.handlers.NuxeoMessageExchangeRecordHandler;
 import org.easysoa.run.RunManager;
 import org.easysoa.run.RunManagerEventReceiver;
@@ -37,7 +37,7 @@
         try {
             ExchangeRecordServletFilter servletFilter = Framework.getService(ExchangeRecordServletFilter.class);
             // TODO : remove NuxeoMessageExchangeRecordHandler class and replace it by the handler manager
-            //FraSCAtiServiceItf frascati = Framework.getLocalService(FraSCAtiServiceProviderItf.class).getFraSCAtiService();
+            //FraSCAtiServiceItf frascati = Framework.getLocalService(FraSCAtiInNuxeoServiceProviderItf.class).getFraSCAtiInNuxeoService();
             //HandlerManager handlerManager = frascati.getService("httpDiscoveryProxy/handlerManagerComponent", "handlerManagerService", HandlerManager.class);
             if(RunManagerEvent.START.equals(runManagerEvent)){
                 servletFilter.start(new NuxeoMessageExchangeRecordHandler());
diff --git a/easysoa-registry/easysoa-registry-rest-miner/src/main/java/org/easysoa/records/filters/ExchangeRecordServletFilterImpl.java b/easysoa-registry/easysoa-registry-rest-miner/src/main/java/org/easysoa/records/filters/ExchangeRecordServletFilterImpl.java
index 7feb06f..9a40199 100644
--- a/easysoa-registry/easysoa-registry-rest-miner/src/main/java/org/easysoa/records/filters/ExchangeRecordServletFilterImpl.java
+++ b/easysoa-registry/easysoa-registry-rest-miner/src/main/java/org/easysoa/records/filters/ExchangeRecordServletFilterImpl.java
@@ -32,7 +32,7 @@
 import org.apache.log4j.Logger;
 import org.easysoa.exchangehandler.HttpExchangeHandler;
 import org.easysoa.frascati.api.FraSCAtiServiceItf;
-import org.easysoa.frascati.api.FraSCAtiServiceProviderItf;
+import org.ow2.frascati.nuxeo.api.FraSCAtiInNuxeoServiceProviderItf;
 import org.easysoa.message.InMessage;
 import org.easysoa.message.OutMessage;
 import org.easysoa.run.RunManager;
@@ -66,8 +66,10 @@
 	    singleton = this;
 	    // Registering the event receiver
 	    try {
-	        FraSCAtiServiceItf frascati = Framework.getLocalService(FraSCAtiServiceProviderItf.class).getFraSCAtiService();
-	        RunManager runManager = frascati.getService("handlerManager/handlerManagerServiceBaseComp/runManagerComponent", "runManagerService", RunManager.class);
+
+	        FraSCAtiServiceItf frascati = (FraSCAtiServiceItf)Framework.getLocalService(
+	                FraSCAtiInNuxeoServiceProviderItf.class).getFraSCAtiInNuxeoService();
+	        RunManager runManager = frascati.getService("handlerManager", "runManagerService", RunManager.class);
 	        runManager.addEventReceiver(new ExchangeRecordServletFilterEventReceiver());
         } catch (Exception ex) {
             logger.error("Unable to register the ExchangeRecordServletFilterEventReceiver in the run manager", ex);
diff --git a/easysoa-registry/easysoa-registry-rest-miner/src/main/java/org/easysoa/records/handlers/NuxeoMessageExchangeRecordHandler.java b/easysoa-registry/easysoa-registry-rest-miner/src/main/java/org/easysoa/records/handlers/NuxeoMessageExchangeRecordHandler.java
index b664a5b..7bcb5db 100644
--- a/easysoa-registry/easysoa-registry-rest-miner/src/main/java/org/easysoa/records/handlers/NuxeoMessageExchangeRecordHandler.java
+++ b/easysoa-registry/easysoa-registry-rest-miner/src/main/java/org/easysoa/records/handlers/NuxeoMessageExchangeRecordHandler.java
@@ -28,9 +28,9 @@
 
 import org.easysoa.exchangehandler.HttpExchangeHandler;
 import org.easysoa.exchangehandler.MessageRecordHandler;
-import org.easysoa.frascati.FraSCAtiServiceException;
+import org.ow2.frascati.nuxeo.exception.FraSCAtiInNuxeoServiceException;
 import org.easysoa.frascati.api.FraSCAtiServiceItf;
-import org.easysoa.frascati.api.FraSCAtiServiceProviderItf;
+import org.ow2.frascati.nuxeo.api.FraSCAtiInNuxeoServiceProviderItf;
 import org.easysoa.message.InMessage;
 import org.easysoa.message.OutMessage;
 import org.easysoa.run.RunManager;
@@ -48,14 +48,15 @@
 
     /**
      * Constructor
-     * @throws FraSCAtiServiceException If a problem occurs
+     * @throws FraSCAtiInNuxeoServiceException If a problem occurs
      */
-    public NuxeoMessageExchangeRecordHandler() throws FraSCAtiServiceException{
+    public NuxeoMessageExchangeRecordHandler() throws FraSCAtiInNuxeoServiceException{
         super();
         // Get the run manager service
-        FraSCAtiServiceItf frascati = Framework.getLocalService(FraSCAtiServiceProviderItf.class).getFraSCAtiService();
+        FraSCAtiServiceItf frascati = (FraSCAtiServiceItf)Framework.getLocalService(
+                FraSCAtiInNuxeoServiceProviderItf.class).getFraSCAtiInNuxeoService();
         //this.setRunManager(frascati.getService("httpDiscoveryProxy/runManagerComponent", "runManagerService", RunManager.class));
-        this.setRunManager(frascati.getService("handlerManager/handlerManagerServiceBaseComp/runManagerComponent", "runManagerService", RunManager.class));
+        this.setRunManager(frascati.getService("handlerManager", "runManagerService", RunManager.class));
     }
     
     /* (non-Javadoc)
diff --git a/easysoa-registry/easysoa-registry-rest-miner/src/test/java/org/easysoa/records/filters/test/NuxeoFrascatiServletFilterTest.java b/easysoa-registry/easysoa-registry-rest-miner/src/test/java/org/easysoa/records/filters/test/NuxeoFrascatiServletFilterTest.java
index 386aeb2..d222cfc 100644
--- a/easysoa-registry/easysoa-registry-rest-miner/src/test/java/org/easysoa/records/filters/test/NuxeoFrascatiServletFilterTest.java
+++ b/easysoa-registry/easysoa-registry-rest-miner/src/test/java/org/easysoa/records/filters/test/NuxeoFrascatiServletFilterTest.java
@@ -31,9 +31,9 @@
 import org.apache.http.impl.client.BasicResponseHandler;
 import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.log4j.Logger;
-import org.easysoa.frascati.FraSCAtiServiceException;
+import org.ow2.frascati.nuxeo.exception.FraSCAtiInNuxeoServiceException;
 import org.easysoa.frascati.api.FraSCAtiServiceItf;
-import org.easysoa.frascati.api.FraSCAtiServiceProviderItf;
+import org.ow2.frascati.nuxeo.api.FraSCAtiInNuxeoServiceProviderItf;
 import org.easysoa.test.ScaTestComponent;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
@@ -81,10 +81,10 @@
         // In Easysoa, we have to get the registry service
         
         // Getting the FraSCAti service interface
-        frascatiService = (FraSCAtiServiceItf) Framework.getService(FraSCAtiServiceProviderItf.class).getFraSCAtiService();
+        frascatiService = (FraSCAtiServiceItf) Framework.getService(FraSCAtiInNuxeoServiceProviderItf.class).getFraSCAtiInNuxeoService();
         assertNotNull(frascatiService);
         // Start the composed exchange handler
-        frascatiService.processComposite("composedExchangeHandler");
+        frascatiService.processComposite("composedExchangeHandler.composite");
         // Start the run manager
         // No need to start the runManager in this test !!
         //frascatiService.processComposite("runManager");
@@ -94,7 +94,7 @@
 
     /**
      * Test the communication between a frascati service and a Nuxeo service
-     * @throws FraSCAtiServiceException If a problem occurs
+     * @throws FraSCAtiInNuxeoServiceException If a problem occurs
      */
     @Test
     public void scaComponentTest() throws Exception {
diff --git a/easysoa-registry/easysoa-registry-runtime-management/src/main/java/org/easysoa/runtime/frascati/FraSCAtiControlService.java b/easysoa-registry/easysoa-registry-runtime-management/src/main/java/org/easysoa/runtime/frascati/FraSCAtiControlService.java
index fd9fba8..e30bc9a 100644
--- a/easysoa-registry/easysoa-registry-runtime-management/src/main/java/org/easysoa/runtime/frascati/FraSCAtiControlService.java
+++ b/easysoa-registry/easysoa-registry-runtime-management/src/main/java/org/easysoa/runtime/frascati/FraSCAtiControlService.java
@@ -21,7 +21,7 @@
 package org.easysoa.runtime.frascati;
 
 import org.easysoa.frascati.api.FraSCAtiServiceItf;
-import org.easysoa.frascati.api.FraSCAtiServiceProviderItf;
+import org.ow2.frascati.nuxeo.api.FraSCAtiInNuxeoServiceProviderItf;
 import org.easysoa.runtime.api.RuntimeControlService;
 import org.nuxeo.runtime.api.Framework;
 
@@ -38,7 +38,7 @@
 	    // Unable to return the states STARTING and STOPPING
 	    RuntimeState state;
 	    try {
-	        FraSCAtiServiceItf frascatiService = (FraSCAtiServiceItf) Framework.getService(FraSCAtiServiceProviderItf.class).getFraSCAtiService();
+	        FraSCAtiServiceItf frascatiService = (FraSCAtiServiceItf) Framework.getService(FraSCAtiInNuxeoServiceProviderItf.class).getFraSCAtiInNuxeoService();
 	        if(frascatiService != null){
 	            state = RuntimeState.STARTED;
 	        } else {
diff --git a/easysoa-registry/nuxeo-frascati-test/pom.xml b/easysoa-registry/nuxeo-frascati-test/pom.xml
index 79f834c..ff54e58 100644
--- a/easysoa-registry/nuxeo-frascati-test/pom.xml
+++ b/easysoa-registry/nuxeo-frascati-test/pom.xml
@@ -65,6 +65,37 @@
             <artifactId>easysoa-frascati-service-api</artifactId>
             <scope>compile</scope>
         </dependency>
+        <!-- FraSCAti -->       
+	    <dependency>
+	       <groupId>org.ow2.frascati.nuxeo</groupId>
+	       <artifactId>frascati-nuxeo</artifactId>
+	       <version>${frascati.version}</version>
+	       <scope>provided</scope>
+	    </dependency>
+	    <dependency>
+	       <groupId>org.ow2.frascati.nuxeo</groupId>
+	       <artifactId>frascati-nuxeo-api</artifactId>
+	       <version>${frascati.version}</version>
+	       <scope>provided</scope>
+	    </dependency>
+	    <dependency>
+	       <groupId>org.ow2.frascati.nuxeo</groupId>
+	       <artifactId>frascati-nuxeo-service-api</artifactId>
+	       <version>${frascati.version}</version>
+	       <scope>provided</scope>
+	    </dependency>
+		<dependency>
+			<groupId>org.ow2.frascati.nuxeo</groupId>
+			<artifactId>frascati-service-bridge-api</artifactId>
+			<version>${frascati.version}</version>
+			<scope>provided</scope>
+		</dependency>
+		<dependency>
+			<groupId>org.ow2.frascati.nuxeo</groupId>
+			<artifactId>frascati-service-bridge</artifactId>
+			<version>${frascati.version}</version>
+			<scope>provided</scope>
+		</dependency>
         <!-- DEPENDENCIES THAT HAVE TO BE ASSUMED BY THE ISOLATED CLASSLOADER PARENT -->
       	<dependency>
       		<groupId>org.easysoa.proxy</groupId>
diff --git a/easysoa-registry/nuxeo-frascati-test/src/main/java/org/nuxeo/frascati/test/FraSCAtiFeature.java b/easysoa-registry/nuxeo-frascati-test/src/main/java/org/nuxeo/frascati/test/FraSCAtiFeature.java
index 3a6b9e0..dc264dc 100644
--- a/easysoa-registry/nuxeo-frascati-test/src/main/java/org/nuxeo/frascati/test/FraSCAtiFeature.java
+++ b/easysoa-registry/nuxeo-frascati-test/src/main/java/org/nuxeo/frascati/test/FraSCAtiFeature.java
@@ -20,136 +20,22 @@
 
 package org.nuxeo.frascati.test;
 
-import java.io.File;
-import java.io.FileFilter;
-import java.io.IOException;
-import java.util.logging.Logger;
-
-import org.nuxeo.common.utils.FileUtils;
-import org.nuxeo.frascati.test.FraSCAtiFeature;
-import org.nuxeo.runtime.test.WorkingDirectoryConfigurator;
 import org.nuxeo.runtime.test.runner.Deploy;
 import org.nuxeo.runtime.test.runner.Features;
-import org.nuxeo.runtime.test.runner.FeaturesRunner;
 import org.nuxeo.runtime.test.runner.RuntimeFeature;
-import org.nuxeo.runtime.test.runner.RuntimeHarness;
-import org.nuxeo.runtime.test.runner.SimpleFeature;
+import org.ow2.frascati.nuxeo.test.FraSCAtiInNuxeoFeature;
 
 @Features(RuntimeFeature.class)
-@Deploy({ "org.nuxeo.runtime.bridge", "org.nuxeo.frascati" })
-public class FraSCAtiFeature extends SimpleFeature implements WorkingDirectoryConfigurator {
+@Deploy({ 
+    "org.nuxeo.runtime.bridge", 
+    "frascati.service.bridge",
+    "org.nuxeo.frascati" })
+public class FraSCAtiFeature extends FraSCAtiInNuxeoFeature {
 
-    protected static final Logger log = Logger.getLogger(FraSCAtiFeature.class.getCanonicalName());
-
-    public void initialize(FeaturesRunner runner) {
-        runner.getFeature(RuntimeFeature.class).getHarness().addWorkingDirectoryConfigurator(this);
+    public FraSCAtiFeature()
+    {
+        System.setProperty(
+                FraSCAtiInNuxeoFeature.FRASCATI_LIBRARIES_TEST_BASEDIR_PROP,
+                "nuxeo-frascati");
     }
-
-    @Override
-    public void configure(RuntimeHarness harness, File workingDir) throws Exception {
-        char sep = File.separatorChar;
-        String frascatiTestLibsPath = null;
-        try {
-            String testPath = workingDir.getAbsolutePath();
-            frascatiTestLibsPath = new StringBuilder(testPath).append(sep).append("frascati").append(sep).append("lib").toString();
-
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-        File frascatiTestLibsDir = new File(frascatiTestLibsPath);
-
-        if (!frascatiTestLibsDir.exists() && !frascatiTestLibsDir.mkdirs()) {
-            log.warning("Enable to create the frascati lib directory");
-            return;
-        }
-        File dot = new File("src");
-        dot = dot.getAbsoluteFile().getParentFile();
-
-        File nuxeoFrascati = searchDirectory(dot, null, "nuxeo-frascati");
-
-        if (!nuxeoFrascati.exists()) {
-            log.warning("Enable to retrieve the 'nuxeo-frascati' directory");
-            return;
-        }
-        log.info("nuxeo-frascati directory found : " + nuxeoFrascati.getAbsolutePath());
-
-        String home = workingDir.getAbsolutePath();
-        log.info("Default environment home path: " + home);
-
-        File frascatiConfigDir = new File(new StringBuilder(home).append(sep).append("config").toString());
-
-        log.info("Default frascati configuration directory path: " + frascatiConfigDir);
-
-        if (!frascatiConfigDir.exists() && !frascatiConfigDir.mkdir()) {
-            log.warning("Enable to create the config directory");
-            return;
-        }
-        File frascatiDir = new File(new StringBuilder(nuxeoFrascati.getAbsolutePath()).append(sep).append("resources").append(sep).append("frascati").toString());
-
-        File configFileSrc = new File(new StringBuilder(frascatiDir.getAbsolutePath()).append(sep).append("config").append(sep).append("frascati_boot.properties").toString());
-
-        File configFileDst = new File(new StringBuilder(frascatiConfigDir.getAbsolutePath()).append(sep).append("frascati_boot.properties").toString());
-        try {
-            FileUtils.copy(configFileSrc, configFileDst);
-            log.config(configFileDst + " copied");
-        } catch (IOException e) {
-            e.printStackTrace();
-        }
-        File frascatiLibsDir = new File(new StringBuilder(frascatiDir.getAbsolutePath()).append(File.separatorChar).append("lib").toString());
-
-        File[] libs = frascatiLibsDir.listFiles();
-
-        for (File srclib : libs) {
-            String libName = srclib.getName();
-            File destlib = new File(new StringBuilder(frascatiTestLibsPath).append(sep).append(libName).toString());
-            try {
-                FileUtils.copy(srclib, destlib);
-                log.config(destlib + " copied");
-            } catch (IOException e) {
-                e.printStackTrace();
-            }
-        }
-    }
-
-    /**
-     * Search for the directory which name is passed on as a parameter. The
-     * first occurrence is returned
-     * 
-     * @param basedir
-     *            the directory from where start the research
-     * @param caller
-     *            the directory from where comes the research
-     * @param directoryName
-     *            the searched directory's name
-     * @return the directory if it has been found
-     */
-    private File searchDirectory(File basedir, final File caller, final String directoryName) {
-
-        File[] children = basedir.listFiles(new FileFilter() {
-
-            public boolean accept(File f) {
-                if (f.isDirectory() && (caller == null || !(caller.getAbsolutePath().equals(f.getAbsoluteFile().getAbsolutePath())))) {
-                    return true;
-                }
-                return false;
-            }
-        });
-        for (File child : children) {
-            if (directoryName.equals(child.getName())) {
-                return child.getAbsoluteFile();
-            }
-            File c = searchDirectory(child.getAbsoluteFile(), basedir, directoryName);
-            if (c != null) {
-                return c.getAbsoluteFile();
-            }
-        }
-        if (caller == null || !caller.getAbsolutePath().equals(basedir.getAbsoluteFile().getParentFile().getAbsolutePath())) {
-            File c = searchDirectory(basedir.getParentFile(), basedir, directoryName);
-            if (c != null) {
-                return c.getAbsoluteFile();
-            }
-        }
-        return null;
-    }
-
 }
\ No newline at end of file
diff --git a/easysoa-registry/nuxeo-frascati-test/src/test/java/org/nuxeo/frascati/test/TestFraSCAtiInNuxeo.java b/easysoa-registry/nuxeo-frascati-test/src/test/java/org/nuxeo/frascati/test/TestFraSCAtiInNuxeo.java
index 7ec3a3b..2675733 100644
--- a/easysoa-registry/nuxeo-frascati-test/src/test/java/org/nuxeo/frascati/test/TestFraSCAtiInNuxeo.java
+++ b/easysoa-registry/nuxeo-frascati-test/src/test/java/org/nuxeo/frascati/test/TestFraSCAtiInNuxeo.java
@@ -27,15 +27,14 @@
 import java.net.MalformedURLException;
 import java.util.logging.Logger;
 
-import org.easysoa.frascati.FraSCAtiServiceException;
+import org.ow2.frascati.nuxeo.exception.FraSCAtiInNuxeoServiceException;
 import org.easysoa.frascati.api.FraSCAtiServiceItf;
-import org.easysoa.frascati.api.FraSCAtiServiceProviderItf;
+import org.ow2.frascati.nuxeo.api.FraSCAtiInNuxeoServiceProviderItf;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.nuxeo.ecm.core.api.ClientException;
-import org.nuxeo.frascati.NuxeoFraSCAtiException;
 import org.nuxeo.runtime.api.Framework;
 import org.nuxeo.runtime.test.runner.Features;
 import org.nuxeo.runtime.test.runner.FeaturesRunner;
@@ -70,7 +69,7 @@
         try
         {
             frascatiService = (FraSCAtiServiceItf) Framework.getLocalService(
-                    FraSCAtiServiceProviderItf.class).getFraSCAtiService();
+                    FraSCAtiInNuxeoServiceProviderItf.class).getFraSCAtiInNuxeoService();
             assertNotNull(frascatiService);
             File scaFile = new File(pojoPath);
             scaFile = scaFile.getAbsoluteFile();
@@ -84,12 +83,13 @@
     }
 
     @After
-    public void tearDown() throws NuxeoFraSCAtiException
+    public void tearDown() 
     {
         try
         {
             frascatiService.remove("helloworld-pojo");
-        } catch (FraSCAtiServiceException e)
+            
+        } catch (FraSCAtiInNuxeoServiceException e)
         {
             e.printStackTrace();
         }
@@ -102,16 +102,15 @@
      * @throws NuxeoFraSCAtiException
      */
     @Test
-    public void testGetRunnableServiceAndExecuteIt()
-            throws NuxeoFraSCAtiException
-    {
+    public void testGetRunnableServiceAndExecuteIt(){
         Runnable r = null;
         try
         {
             r = (Runnable) frascatiService.getService(fcomponent, "r",
                     Runnable.class);
-        } catch (FraSCAtiServiceException e)
+        } catch (FraSCAtiInNuxeoServiceException e)
         {
+            // TODO Auto-generated catch block
             e.printStackTrace();
         }
         assertNotNull(r);
@@ -120,12 +119,11 @@
 
     /**
      * Test NuxeoFraSCAtiException is thrown if a service is unknown
-     * 
-     * @throws NuxeoFraSCAtiException
+     * @throws FraSCAtiInNuxeoServiceException 
      */
-    @Test(expected = FraSCAtiServiceException.class)
+    @Test(expected = FraSCAtiInNuxeoServiceException.class)
     public void testThrowExceptionIfGetUnexistingService()
-            throws FraSCAtiServiceException
+            throws FraSCAtiInNuxeoServiceException
     {
         frascatiService.getService(fcomponent, "unknown", Runnable.class);
     }
@@ -154,12 +152,13 @@
                         servletFile.toURI().toURL()).getName();
                 frascatiService.remove(componentServletName);
             }
-        } catch (FraSCAtiServiceException e)
+        }  catch (MalformedURLException e)
         {
             e.printStackTrace();
-        } catch (MalformedURLException e)
+            
+        } catch (FraSCAtiInNuxeoServiceException e)
         {
-            e.printStackTrace();
+            e.printStackTrace();            
         }
     }
 
@@ -177,14 +176,13 @@
                         FraSCAtiServiceItf.all, wsFile.toURI().toURL()).getName();
                 frascatiService.remove(componentWSName);
             }
-        } catch (FraSCAtiServiceException e)
+        } catch (FraSCAtiInNuxeoServiceException e)
         {
             e.printStackTrace();
+            
         } catch (MalformedURLException e)
         {
             e.printStackTrace();
         }
     }
-
-
 }
\ No newline at end of file
diff --git a/easysoa-registry/nuxeo-frascati/pom.xml b/easysoa-registry/nuxeo-frascati/pom.xml
index b66a0db..cd5bfa1 100644
--- a/easysoa-registry/nuxeo-frascati/pom.xml
+++ b/easysoa-registry/nuxeo-frascati/pom.xml
@@ -22,13 +22,37 @@
        <groupId>org.easysoa.frascati</groupId>
        <artifactId>easysoa-frascati-service-api</artifactId>
        <scope>provided</scope>
-    </dependency>    
+    </dependency>  
+    <!-- FraSCAti -->    
     <dependency>
-    	<groupId>org.easysoa.registry.api</groupId>
-  		<artifactId>easysoa-remote-frascati</artifactId>
-    	<version>0.5-SNAPSHOT</version>
-    </dependency>    
-    <!-- FraSCAti -->
+       <groupId>org.ow2.frascati.nuxeo</groupId>
+       <artifactId>frascati-nuxeo-api</artifactId>
+       <version>${frascati.version}</version>
+       <scope>provided</scope>
+    </dependency>  
+    <dependency>
+       <groupId>org.ow2.frascati.nuxeo</groupId>
+       <artifactId>frascati-nuxeo-service-api</artifactId>
+       <version>${frascati.version}</version>
+       <scope>provided</scope>
+    </dependency>
+	<dependency>
+		<groupId>org.ow2.frascati.nuxeo</groupId>
+		<artifactId>frascati-service-bridge-api</artifactId>
+		<version>${frascati.version}</version>
+		<scope>provided</scope>
+	</dependency>
+	<dependency>
+		<groupId>org.ow2.frascati.nuxeo</groupId>
+		<artifactId>frascati-service-bridge</artifactId>
+		<version>${frascati.version}</version>
+		<scope>provided</scope>
+	</dependency>
+    <dependency>
+      <groupId>org.ow2.frascati.nuxeo</groupId>
+      <artifactId>frascati-isolated</artifactId>
+      <version>${frascati.version}</version>
+    </dependency>
     <!-- Nuxeo -->
     <dependency>
       <groupId>org.nuxeo.runtime</groupId>
@@ -38,8 +62,7 @@
     <dependency>
       <groupId>org.nuxeo.ecm.core</groupId>
       <artifactId>nuxeo-core-event</artifactId>
-    </dependency>
-    
+    </dependency>    
   </dependencies>
 
   <build>
@@ -1302,7 +1325,42 @@
                   <groupId>org.easysoa.frascati</groupId>
                   <artifactId>easysoa-frascati-service</artifactId>
                   <version>${easysoa.version}</version>
-                </artifactItem>
+                </artifactItem>              
+			    <artifactItem>
+			       <groupId>org.ow2.frascati.nuxeo</groupId>
+			       <artifactId>frascati-nuxeo-service</artifactId>
+			       <version>${frascati.version}</version>
+			    </artifactItem>              
+			    <artifactItem>
+			       <groupId>org.ow2.frascati.nuxeo</groupId>
+			       <artifactId>frascati-event-parser</artifactId>
+			       <version>${frascati.version}</version>
+			    </artifactItem>
+			    <artifactItem>
+				    <groupId>org.ow2.frascati.nuxeo</groupId>
+				    <artifactId>frascati-metamodel-nuxeo</artifactId>
+				    <version>${frascati.version}</version>
+			    </artifactItem>
+ 				<artifactItem>
+ 					<groupId>org.ow2.frascati.nuxeo</groupId>
+ 					<artifactId>frascati-binding-nuxeo</artifactId>
+ 					<version>${frascati.version}</version>
+ 				</artifactItem>
+ 				<artifactItem>
+ 					<groupId>org.ow2.frascati.nuxeo.fractal</groupId>
+ 					<artifactId>fractal-bf-connectors-nuxeo</artifactId>
+ 					<version>${frascati.version}</version>
+ 				</artifactItem> 
+ 				<artifactItem>
+			        <groupId>org.apache.tuscany.sca</groupId>
+			        <artifactId>tuscany-sca-api</artifactId>
+			        <version>1.6.2</version>
+ 				</artifactItem>
+ 				<artifactItem>
+			      <groupId>org.ow2.frascati.nuxeo</groupId>
+			      <artifactId>frascati-implementation-nuxeo</artifactId>
+			      <version>${frascati.version}</version>
+			    </artifactItem>					
               </artifactItems>
             </configuration>
           </execution>
diff --git a/easysoa-registry/nuxeo-frascati/src/main/java/org/nuxeo/frascati/NuxeoFraSCAti.java b/easysoa-registry/nuxeo-frascati/src/main/java/org/nuxeo/frascati/NuxeoFraSCAti.java
index 268a9cb..1c8790e 100644
--- a/easysoa-registry/nuxeo-frascati/src/main/java/org/nuxeo/frascati/NuxeoFraSCAti.java
+++ b/easysoa-registry/nuxeo-frascati/src/main/java/org/nuxeo/frascati/NuxeoFraSCAti.java
@@ -20,74 +20,24 @@
 package org.nuxeo.frascati;
 
 import java.io.File;
-import java.io.IOException;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
-import org.easysoa.sca.frascati.RemoteFraSCAtiServiceProvider;
-import org.nuxeo.runtime.bridge.Application;
-
+import org.easysoa.frascati.api.FraSCAtiServiceItf;
+import org.ow2.frascati.nuxeo.api.AbstractFraSCAtiInNuxeo;
+import org.ow2.frascati.nuxeo.exception.FraSCAtiInNuxeoException;
 
 /**
- * NuxeoFraSCAti is a RemoteFraSCAtiServiceProvider in a Nuxeo Context
+ * FraSCAti in Nuxeo instance
  */
-public class NuxeoFraSCAti extends RemoteFraSCAtiServiceProvider implements Application
+public class NuxeoFraSCAti extends AbstractFraSCAtiInNuxeo<FraSCAtiServiceItf>
 {
-    Logger log = Logger.getLogger(NuxeoFraSCAti.class.getCanonicalName());
-    private static File EMPTY_LIB_DIRECTORY; 
-    static
-    {
-        try
-        {
-            File tmpDir = File.createTempFile("nuxeo_frascati", ".tmp");
-            tmpDir.delete();
-            tmpDir.getParentFile();
-            EMPTY_LIB_DIRECTORY = new File(tmpDir.getAbsolutePath() + 
-                    File.separator + "nuxeo_frascati");
-            EMPTY_LIB_DIRECTORY.mkdir();
-        } catch (IOException e)
-        {
-            e.printStackTrace();
-        }        
-    }
-    
     /**
-     * Constructor
-     * @throws Exception 
+     * @param librariesDirectory
+     * @param parentClassLoader
+     * @throws FraSCAtiInNuxeoException
+     * @throws Exception
      */
-    public NuxeoFraSCAti() throws Exception
+    protected NuxeoFraSCAti(File librariesDirectory,
+            ClassLoader parentClassLoader) throws FraSCAtiInNuxeoException,Exception
     {
-        super(EMPTY_LIB_DIRECTORY);
-    }
-    
-    /*
-     * (non-Javadoc)
-     * 
-     * @see org.nuxeo.runtime.bridge.Application#getService(java.lang.Class)
-     */
-    @SuppressWarnings("unchecked")
-    public <T> T getService(Class<T> type)
-    {
-        if (type.isAssignableFrom(getClass()))
-        {
-            return (T) this;
-        }
-        return null;
-    }
-
-    /*
-     * (non-Javadoc)
-     * 
-     * @see org.nuxeo.runtime.bridge.Application#destroy()
-     */
-    public void destroy()
-    {
-        try
-        {
-            super.stopFraSCAtiService();
-        } catch (Exception e)
-        {
-            log.log(Level.WARNING,e.getMessage(),e);
-        }
-    }
+        super(librariesDirectory, parentClassLoader);
+    }    
 }
diff --git a/easysoa-registry/nuxeo-frascati/src/main/java/org/nuxeo/frascati/NuxeoFraSCAtiException.java b/easysoa-registry/nuxeo-frascati/src/main/java/org/nuxeo/frascati/NuxeoFraSCAtiException.java
deleted file mode 100644
index 75c1635..0000000
--- a/easysoa-registry/nuxeo-frascati/src/main/java/org/nuxeo/frascati/NuxeoFraSCAtiException.java
+++ /dev/null
@@ -1,43 +0,0 @@
-/**
- * EasySOA - Nuxeo FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.nuxeo.frascati;
-
-/**
- * Defines an exception thrown by NuxeoFraSCAti
- */
-public class NuxeoFraSCAtiException extends Exception {
-
-	/**
-	 * Default serial ID
-	 */
-	private static final long serialVersionUID = 1L;
-	
-	
-	/**
-	 * Constructor 
-	 * 
-	 * @param message
-	 * 	the error message
-	 */
-	public NuxeoFraSCAtiException(String message) {
-		super(message);
-	}
-
-}
diff --git a/easysoa-registry/nuxeo-frascati/src/main/java/org/nuxeo/frascati/factory/FraSCAtiFactory.java b/easysoa-registry/nuxeo-frascati/src/main/java/org/nuxeo/frascati/factory/FraSCAtiFactory.java
deleted file mode 100644
index 9cdc45f..0000000
--- a/easysoa-registry/nuxeo-frascati/src/main/java/org/nuxeo/frascati/factory/FraSCAtiFactory.java
+++ /dev/null
@@ -1,133 +0,0 @@
-/**
- * EasySOA - Nuxeo FraSCAti
- * Copyright 2011 Open Wide
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * 
- * Contact : easysoa-dev@googlegroups.com
- */
-package org.nuxeo.frascati.factory;
-
-import java.io.File;
-import java.io.FileInputStream;
-import java.net.URL;
-import java.net.URLClassLoader;
-import java.util.Enumeration;
-import java.util.Properties;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
-import org.nuxeo.common.Environment;
-import org.nuxeo.ecm.core.event.EventProducer;
-import org.nuxeo.frascati.NuxeoFraSCAti;
-import org.nuxeo.runtime.api.Framework;
-import org.nuxeo.runtime.bridge.Application;
-import org.nuxeo.runtime.bridge.ApplicationDescriptor;
-import org.nuxeo.runtime.bridge.ApplicationFactory;
-
-/**
- * The FraSCAtiFactory is used by the Nuxeo runtime bridge to build an isolated
- * FraSCAti instance
- */
-public class FraSCAtiFactory implements ApplicationFactory
-{
-
-    // Logger
-    private static Logger log = Logger.getLogger(FraSCAtiFactory.class
-            .getCanonicalName());
-
-    private static final String FRASCATI_OUTPUT_DIRECTORY_PROPERTY = "org.ow2.frascati.output.directory";
-
-    /*
-     * (non-Javadoc)
-     * 
-     * @see org.nuxeo.runtime.bridge.ApplicationFactory
-     * #createApplication(org.nuxeo.runtime.bridge.ApplicationDescriptor)
-     */
-    @Override
-    public Application createApplication(ApplicationDescriptor desc)
-            throws Exception
-    {
-        char sep = File.separatorChar;
-        URLClassLoader cl = (URLClassLoader) Thread.currentThread()
-                .getContextClassLoader();
-
-        log.log(Level.INFO, "ContextClassLoader found : " + cl);
-        String home = Environment.getDefault().getHome().getAbsolutePath();
-        log.log(Level.INFO, "Frascati home dir : " + home);
-
-        String outputDir = new StringBuilder(home).append(sep)
-                .append("tmp").toString();
-        System.setProperty(FRASCATI_OUTPUT_DIRECTORY_PROPERTY, outputDir);
-
-        log.log(Level.INFO, "Define FraSCAti default output dir : "
-                + outputDir);
-        String propertyBootFilePath = new StringBuilder(home).append(sep)
-                .append("config").append(sep)
-                .append("frascati_boot.properties").toString();
-        log.log(Level.INFO, "Read frascati_boot.properties file at "
-                + propertyBootFilePath);
-        try
-        {
-            Properties props = new Properties();
-            props.loadFromXML(new FileInputStream(new File(
-                    propertyBootFilePath)));
-
-            Enumeration<Object> keys = props.keys();
-            while (keys.hasMoreElements())
-            {
-                String key = (String) keys.nextElement();
-                String value = props.getProperty(key);
-                System.setProperty(key, value);
-            }
-        } catch (Exception e)
-        {
-            log.log(Level.INFO, "no boot properties found");
-        }
-        URL[] urls = cl.getURLs();
-        if (urls == null || urls.length == 0)
-        {
-            log.log(Level.WARNING,
-                    "No classpath entry found for IsolatedClassLoader");
-        } else if (log.getLevel() == Level.CONFIG)
-        {
-            for (URL url : urls)
-            {
-                log.log(Level.INFO,
-                        "Added classpath entry :" + url.toExternalForm());
-            }
-        }
-        if (desc != null)
-        {
-            log.log(Level.INFO,
-                    "ApplicationDescriptor found - required isolated status : "
-                            + desc.isIsolated());
-        } else
-        {
-            log.log(Level.WARNING, "No ApplicationDescriptor found");
-        }
-        
-        NuxeoFraSCAti service = new NuxeoFraSCAti();
-        
-        // Notify Nuxeo that NuxeoFraSCAti has been launched
-        /*try{*/
-            EventProducer eventProducer = Framework.getService(EventProducer.class);
-            eventProducer.fireEvent(new NuxeoFraSCAtiStartedEvent(service.getFraSCAtiService()));
-        /*} catch(Exception ex){
-            // nothing to do !!
-        }*/
-        
-        return service;
-    }
-}
diff --git a/easysoa-registry/nuxeo-frascati/src/main/java/org/nuxeo/frascati/factory/NuxeoFraSCAtiStartedEvent.java b/easysoa-registry/nuxeo-frascati/src/main/java/org/nuxeo/frascati/factory/NuxeoFraSCAtiStartedEvent.java
deleted file mode 100644
index e159eee..0000000
--- a/easysoa-registry/nuxeo-frascati/src/main/java/org/nuxeo/frascati/factory/NuxeoFraSCAtiStartedEvent.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package org.nuxeo.frascati.factory;
-
-import org.easysoa.frascati.api.FraSCAtiServiceItf;
-import org.nuxeo.ecm.core.event.impl.EventContextImpl;
-import org.nuxeo.ecm.core.event.impl.EventImpl;
-
-public class NuxeoFraSCAtiStartedEvent extends EventImpl {
-
-	public static final String ID = "nuxeoFraSCAtiStartedEvent";
-	
-	private static final long serialVersionUID = 1L;
-	
-	public NuxeoFraSCAtiStartedEvent(FraSCAtiServiceItf fraSCAtiService) {
-		super(ID, new EventContextImpl(fraSCAtiService));
-		if (fraSCAtiService == null) {
-			throw new NullPointerException("fraSCAtiService must not be null");
-		}
-	}
-	
-	public FraSCAtiServiceItf getFraSCAtiService() {
-		Object[] arguments = getContext().getArguments();
-		if (arguments.length > 0 && arguments[0] instanceof FraSCAtiServiceItf) {
-			return (FraSCAtiServiceItf) getContext().getArguments()[0];
-		}
-		else {
-			return null;
-		}
-	}
-
-}
diff --git a/easysoa-registry/nuxeo-frascati/src/main/resources/META-INF/MANIFEST.MF b/easysoa-registry/nuxeo-frascati/src/main/resources/META-INF/MANIFEST.MF
index 81df378..6943982 100644
--- a/easysoa-registry/nuxeo-frascati/src/main/resources/META-INF/MANIFEST.MF
+++ b/easysoa-registry/nuxeo-frascati/src/main/resources/META-INF/MANIFEST.MF
@@ -1,10 +1,10 @@
 Manifest-Version: 1.0
 Bundle-ManifestVersion: 2
-Bundle-Version: 0.0-SNAPSHOT
+Bundle-Version: 0.5-SNAPSHOT
 Bundle-Name: nuxeo-frascati
 Bundle-SymbolicName: org.nuxeo.frascati;singleton:=true
 Bundle-Vendor: INRIA
 Nuxeo-Require: org.nuxeo.ecm.core.api,
  org.nuxeo.ecm.core,
  org.nuxeo.runtime.bridge
-Nuxeo-Component: OSGI-INF/frascati-service.xml
\ No newline at end of file
+Nuxeo-Component: OSGI-INF/frascati-service.xml
diff --git a/easysoa-registry/nuxeo-frascati/src/main/resources/OSGI-INF/frascati-service.xml b/easysoa-registry/nuxeo-frascati/src/main/resources/OSGI-INF/frascati-service.xml
index 5e37f25..d624001 100644
--- a/easysoa-registry/nuxeo-frascati/src/main/resources/OSGI-INF/frascati-service.xml
+++ b/easysoa-registry/nuxeo-frascati/src/main/resources/OSGI-INF/frascati-service.xml
@@ -4,14 +4,10 @@
  <implementation class="org.nuxeo.runtime.bridge.ApplicationComponent" />
  <property name="name" value="NuxeoFraSCAti" />
  <service>
-  <provide interface="org.easysoa.frascati.api.FraSCAtiServiceProviderItf" />
+  <provide interface="org.ow2.frascati.nuxeo.api.FraSCAtiInNuxeoServiceProviderItf" />
  </service>
 
  <extension target="org.nuxeo.runtime.bridge.ApplicationLoader" point="applications">
-  <application name="NuxeoFraSCAti" isolated="true" factory="org.nuxeo.frascati.factory.FraSCAtiFactory">
-   <classpath>
-    <entry>frascati/lib/*.jar</entry>
-   </classpath>
-  </application>
+  <application name="NuxeoFraSCAti" isolated="false" factory="org.nuxeo.frascati.FraSCAtiFactory"/>
  </extension>
 </component>
\ No newline at end of file
diff --git a/easysoa-registry/pom.xml b/easysoa-registry/pom.xml
index a2c8c23..2c4e9c9 100644
--- a/easysoa-registry/pom.xml
+++ b/easysoa-registry/pom.xml
@@ -15,7 +15,7 @@
   <name>EasySOA Registry Parent</name>
 
   <properties>
-    <easysoa.nuxeo-frascati.version>0.0-SNAPSHOT</easysoa.nuxeo-frascati.version>
+    <easysoa.nuxeo-frascati.version>0.5-SNAPSHOT</easysoa.nuxeo-frascati.version>
     <jetty.version>7.4.5.v20110725</jetty.version>
     <asm.version>3.1</asm.version>
     <explorer.version>1.0</explorer.version>
diff --git a/pom.xml b/pom.xml
index f358f03..362dd22 100644
--- a/pom.xml
+++ b/pom.xml
@@ -33,7 +33,7 @@
     <easysoa.version>0.5-SNAPSHOT</easysoa.version>
     <easysoa.nuxeo.version>5.5</easysoa.nuxeo.version>
     <easysoa.nuxeo-bridge.version>5.5-SNAPSHOT</easysoa.nuxeo-bridge.version>
-    <easysoa.nuxeo-frascati.version>0.0-SNAPSHOT</easysoa.nuxeo-frascati.version>
+    <easysoa.nuxeo-frascati.version>0.5-SNAPSHOT</easysoa.nuxeo-frascati.version>
     
     <!-- FraSCAti must be in version 1.5-SNAPSHOT because Velocity feature is only
       available in this version at the moment -->
diff --git a/samples/easysoa-samples-events/src/test/java/org/easysoa/proxy/handler/event/EventPafSampleGlueStarter.java b/samples/easysoa-samples-events/src/test/java/org/easysoa/proxy/handler/event/EventPafSampleGlueStarter.java
index ea1a9b6..f6b2363 100644
--- a/samples/easysoa-samples-events/src/test/java/org/easysoa/proxy/handler/event/EventPafSampleGlueStarter.java
+++ b/samples/easysoa-samples-events/src/test/java/org/easysoa/proxy/handler/event/EventPafSampleGlueStarter.java
@@ -68,7 +68,7 @@
      * @throws ClientProtocolException
      * @throws IOException
      * @throws FrascatiException 
-     * @throws FraSCAtiServiceException 
+     * @throws FraSCAtiInNuxeoServiceException 
      */
     
     @Test