// Unified API Mocking
// Copyright (c) 2011 Open Wide and others
// 
// MIT licensed
// 
// Contact : easysoa-dev@googlegroups.com

/**
 * 
 * --------------
 * Object kinds
 * --------------
 * 
 * Service
 * 		Business or technical service need, independently from its implementation.
 * 		Impls. may or may not be made available as web services (see Scaffolder Client). 
 * Service Implementation
 * 		Implementation of a Service. Several implementations of the same need can exist,
 * 		for instance a light (scripted) implementation, a full implementation and a mock one.
 * Service Endpoint
 * 		Service Impl. launched and made available through the web.
 * 
 * Environment
 * 		Collection of Service Endpoints used together in a certain context (development, staging...)
 * 
 * Scaffolder Client
 * 		Specific type of Service Impl. generated by EasySOA Light as a client to call
 * 		existing Service Endpoints.
 * Scaffolder Client UI
 * 		Part of a scaffolder client that displays a form for users to call a service endpoint.
 * 		Should be customizable (by editing the template for example).
 * 
 * Other possible objects:
 * 	- Development Environment (specific type of environment?)
 * 
 * --------------
 * Ressources hierarchy
 * --------------
 * /envDev/scaffolderClient/references/calledService
*/

var utils = require('./utils.js');

EASYSOA_HOST = "http://localhost";
EASYSOA_LIGHT_SERVER_URL = EASYSOA_HOST + ":9011/";
EASYSOA_PAF_SERVICES_URL = EASYSOA_HOST + ":9010/";
EASYSOA_SCAFFOLDER_UI_URL = EASYSOA_HOST + ":8090/";

// ===================== Default objects =====================

var ServiceImpl = {
    name : undefined
};

var ServiceEndpoint = {
    name : undefined,
    url : undefined,
    started : false,
    checkStarted : function() {
        console.log("Checking: " + this.url);
        return this.started;
    },
    start : function() {
        console.log("Starting: " + this.name);
        this.started = true;
        return this.started;
    },
    stop : function() {
        console.log("Stopping: " + this.name);
        this.started = false;
    }
};

var Environment = {
    id : undefined,
    name : undefined,
    implServerUrl : undefined,
    serviceImpls : new Array(),
    externalServiceEndpoints : new Array()
};

var ServiceScaffolder = ServiceEndpoint.extend({
    name : undefined,
    url : undefined,
    scaffolderUi : undefined,
    scaffoldedServiceUrl : undefined
});

// ===================== EasySOA UI =====================

exports.selectServiceEndpointInUI = function(envFilter) {
    return ServiceEndpoint.extend({
        name : "PureAirFlowers",
        url : EASYSOA_PAF_SERVICES_URL + "PureAirFlowers",
        started : true
    });
};

// ===================== Services =====================

exports.createMockServiceImpl = function(serviceEndpointToMock) {
    return ServiceImpl.extend({
        name : serviceEndpointToMock.name + " mock"
    });
};

// ===================== Environments =====================

exports.createEnvironment = function(envKind, user) {
    if (envKind == "Light") {
        implServerUrl = EASYSOA_LIGHT_SERVER_URL;
    }
    var id = 0;
    return Environment.extend({
        id : id,
        name : user + "_" + id + "_" + "PureAirFlowers",
        implServerUrl : implServerUrl
    });
};

exports.addExternalServiceEndpoint = function(env, serviceEndpointToScaffold) {
    env.externalServiceEndpoints.push(serviceEndpointToScaffold);
};

exports.addServiceImpl = function(env, serviceImpl) {
    var newServiceEndpoint = ServiceEndpoint.extend({
        name : serviceImpl.name,
        url : env.implServerUrl + serviceImpl.name.replace(" ", "_")
    });
    env.serviceImpls.push(newServiceEndpoint);
    return newServiceEndpoint;
};

exports.start = function(env) {
    for (i in env.externalServiceEndpoints) {
        if (!env.externalServiceEndpoints[i].checkStarted()) {
            return false;
        }
    }
    for (i in env.serviceImpls) {
        if (!env.serviceImpls[i].start()) {
            return false;
        }
    }
    return true;
};

exports.stop = function(env) {
    for (serviceImpl in env.serviceImpls) {
        serviceImpl.stop();
    }
};

//===================== Scaffolder clients =====================

exports.createScaffolderClient = function(env, serviceEndpointToScaffold) {
    return ServiceEndpoint.extend({
        name : serviceEndpointToScaffold.name + " Scaffolder Client",
        url : env.implServerUrl + serviceEndpointToScaffold.name + "ScaffolderClient",
        scaffolderUi : EASYSOA_SCAFFOLDER_UI_URL,
        scaffoldedServiceUrl : serviceEndpointToScaffold.url
    });
};

exports.display = function(ui) {
    console.log("Displaying: "+ui);
};