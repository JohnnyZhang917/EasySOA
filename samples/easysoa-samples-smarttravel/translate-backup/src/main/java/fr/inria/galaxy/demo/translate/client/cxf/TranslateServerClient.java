package fr.inria.galaxy.demo.translate.client.cxf;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.net.URL;

import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import javax.xml.namespace.QName;

import org.apache.cxf.configuration.jsse.TLSClientParameters;
import org.apache.cxf.endpoint.Client;
import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.transport.http.HTTPConduit;

//import de.daenet.webservices.currencyserver.CurrencyServerWebService;
//import de.daenet.webservices.currencyserver.CurrencyServerWebServiceSoap;

import com.microsofttranslator.api.v1.soap.LanguageService;
import com.microsofttranslator.api.v1.soap.SoapService;
//import com.microsofttranslator.api.v1.soap.Translate;
//import fr.inria.galaxy.demo.translate.TranslateServerServlet;

/**
 * This class was generated by Apache CXF 2.2.1 Tue Nov 03 12:16:13 CET 2009
 * Generated source version: 2.2.1
 * 
 */

public final class TranslateServerClient {

	private static final QName SERVICE_NAME = new QName("http://api.microsofttranslator.com/v1/soap.svc", "SoapService");

	private TranslateServerClient() {
	}

	public static void main(String args[]) throws Exception {
		URL wsdlURL = TranslateServerClient.class.getResource("/translateserverwebservice.wsdl");
		
		SoapService ss = new SoapService(wsdlURL, SERVICE_NAME);
		LanguageService port = ss.getBasicHttpBindingLanguageService();
		allowSSLConnection(port);
		String appID = "BD061A8446F9FA67F9CD39B278237C98599FAFEA";
		{
			System.out.println("Invoking Translate Service");
			System.out.println("Translating :" + port.translate(appID, "Aller manger au Mc Donald", "FR", "EN"));
			System.out.println("Translating :" + port.translate(appID, "Hello, This is a test", "EN", "FR"));
			System.out.println("Translating :" + port.translate(appID, "I would like a bier !", "EN", "FR"));
		}

		System.exit(0);
	}

	private static void allowSSLConnection(Object service) {
		Client clientProxy = ClientProxy.getClient(service);

		HTTPConduit conduit = (HTTPConduit) clientProxy.getConduit();
		String targetAddr = conduit.getTarget().getAddress().getValue();
		if (targetAddr.toLowerCase().startsWith("https:")) {
			TrustManager[] simpleTrustManager = new TrustManager[] { new X509TrustManager() {
				public java.security.cert.X509Certificate[] getAcceptedIssuers() {
					return null;
				}

				public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {
				}

				public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {
				}
			} };
			TLSClientParameters tlsParams = new TLSClientParameters();
			tlsParams.setTrustManagers(simpleTrustManager);
			tlsParams.setDisableCNCheck(true);
			conduit.setTlsClientParameters(tlsParams);
		}
	}

}
