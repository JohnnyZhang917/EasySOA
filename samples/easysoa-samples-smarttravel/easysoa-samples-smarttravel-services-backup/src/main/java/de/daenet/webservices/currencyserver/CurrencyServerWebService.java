/**
 * EasySOA Samples - Smart Travel
 * Copyright 2011 Open Wide
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * Contact : easysoa-dev@googlegroups.com
 */


/*
 * 
 */

package de.daenet.webservices.currencyserver;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.3.3
 * 2011-07-20T14:27:53.514+02:00
 * Generated source version: 2.3.3
 * 
 */


@WebServiceClient(name = "CurrencyServerWebService", 
                  //wsdlLocation = "http://www.currencyserver.de/webservice/currencyserverwebservice.asmx?wsdl",
                  targetNamespace = "http://www.daenet.de/webservices/CurrencyServer") 
public class CurrencyServerWebService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.daenet.de/webservices/CurrencyServer", "CurrencyServerWebService");
    public final static QName CurrencyServerWebServiceSoap12 = new QName("http://www.daenet.de/webservices/CurrencyServer", "CurrencyServerWebServiceSoap12");
    public final static QName CurrencyServerWebServiceSoap = new QName("http://www.daenet.de/webservices/CurrencyServer", "CurrencyServerWebServiceSoap");
    public final static QName CurrencyServerWebServiceHttpGet = new QName("http://www.daenet.de/webservices/CurrencyServer", "CurrencyServerWebServiceHttpGet");
    public final static QName CurrencyServerWebServiceHttpPost = new QName("http://www.daenet.de/webservices/CurrencyServer", "CurrencyServerWebServiceHttpPost");
    static {
        URL url = null;
        try {
            url = new URL("http://www.currencyserver.de/webservice/currencyserverwebservice.asmx?wsdl");
        } catch (MalformedURLException e) {
            System.err.println("Can not initialize the default wsdl from http://www.currencyserver.de/webservice/currencyserverwebservice.asmx?wsdl");
            // e.printStackTrace();
        }
        WSDL_LOCATION = url;
    }

    public CurrencyServerWebService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public CurrencyServerWebService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public CurrencyServerWebService() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     * 
     * @return
     *     returns CurrencyServerWebServiceSoap
     */
    @WebEndpoint(name = "CurrencyServerWebServiceSoap12")
    public CurrencyServerWebServiceSoap getCurrencyServerWebServiceSoap12() {
        return super.getPort(CurrencyServerWebServiceSoap12, CurrencyServerWebServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CurrencyServerWebServiceSoap
     */
    @WebEndpoint(name = "CurrencyServerWebServiceSoap12")
    public CurrencyServerWebServiceSoap getCurrencyServerWebServiceSoap12(WebServiceFeature... features) {
        return super.getPort(CurrencyServerWebServiceSoap12, CurrencyServerWebServiceSoap.class, features);
    }
    /**
     * 
     * @return
     *     returns CurrencyServerWebServiceSoap
     */
    @WebEndpoint(name = "CurrencyServerWebServiceSoap")
    public CurrencyServerWebServiceSoap getCurrencyServerWebServiceSoap() {
        return super.getPort(CurrencyServerWebServiceSoap, CurrencyServerWebServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CurrencyServerWebServiceSoap
     */
    @WebEndpoint(name = "CurrencyServerWebServiceSoap")
    public CurrencyServerWebServiceSoap getCurrencyServerWebServiceSoap(WebServiceFeature... features) {
        return super.getPort(CurrencyServerWebServiceSoap, CurrencyServerWebServiceSoap.class, features);
    }
    /**
     * 
     * @return
     *     returns CurrencyServerWebServiceHttpGet
     */
    @WebEndpoint(name = "CurrencyServerWebServiceHttpGet")
    public CurrencyServerWebServiceHttpGet getCurrencyServerWebServiceHttpGet() {
        return super.getPort(CurrencyServerWebServiceHttpGet, CurrencyServerWebServiceHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CurrencyServerWebServiceHttpGet
     */
    @WebEndpoint(name = "CurrencyServerWebServiceHttpGet")
    public CurrencyServerWebServiceHttpGet getCurrencyServerWebServiceHttpGet(WebServiceFeature... features) {
        return super.getPort(CurrencyServerWebServiceHttpGet, CurrencyServerWebServiceHttpGet.class, features);
    }
    /**
     * 
     * @return
     *     returns CurrencyServerWebServiceHttpPost
     */
    @WebEndpoint(name = "CurrencyServerWebServiceHttpPost")
    public CurrencyServerWebServiceHttpPost getCurrencyServerWebServiceHttpPost() {
        return super.getPort(CurrencyServerWebServiceHttpPost, CurrencyServerWebServiceHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CurrencyServerWebServiceHttpPost
     */
    @WebEndpoint(name = "CurrencyServerWebServiceHttpPost")
    public CurrencyServerWebServiceHttpPost getCurrencyServerWebServiceHttpPost(WebServiceFeature... features) {
        return super.getPort(CurrencyServerWebServiceHttpPost, CurrencyServerWebServiceHttpPost.class, features);
    }

}
