#------------------------------------------------------------------------------
#
# Proxy properties
#
#------------------------------------------------------------------------------
proxy.default.monitoring.mode=DISCOVERY

#------------------------------------------------------------------------------
#
# Path properties
#
#------------------------------------------------------------------------------
#path.record.store=target/stores/
#path.template.store=target/classes/webContent/templates/
# Must be the same as the one configured in composite file. See 'location' attribute for ProxyWSTemplate component
#path.velocity.templates=webContent/templates/ 
# Specify here where the reports are stored
#path.reports=target/reports

# Specify here where the original exchange records are stored
#path.record.store=target/stores/
#path.record.store = /data/home/fntangke/workspace/EasySOA/easysoa-distribution/easysoa/serviceRegistry/easysoa/stores/myTest/
path.record.store = src/main/resources/
# Specify here where the customized/templatized exchange records are stored
path.template.store=target/classes/webContent/templates/
# Specify here where the reports are stored
path.reports=target/reports

#------------------------------------------------------------------------------
# Nuxeo registration service URL
#------------------------------------------------------------------------------
# for full mocked tests :
nuxeo.automation.service=http://localhost:6088/nuxeo/site/automation/
nuxeo.rest.service=http://localhost:6088/nuxeo/site
# for test-embedded nuxeo :
#nuxeo.automation.service=http://localhost:6088/automation/
#nuxeo.rest.service=http://localhost:6088/
# for full nuxeo :
#nuxeo.automation.service=http://localhost:8080/nuxeo/site/automation/
nuxeo.auth.login=Administrator
nuxeo.auth.password=Administrator

#------------------------------------------------------------------------------
# Esper Statements
#------------------------------------------------------------------------------
esper.message.listener.statement=select * from pattern[every-distinct(s.completePath) s=Message]
esper.node.listener.statement=select * from Node
#Problem : send a event (null event) even if there is no new nodes
#esper.node.listener.statement=select * from Node group by url output every 1 second

#esper.node.listener.statement=select * from pattern[every-distinct(n.url) n=Node]
#esper.message.listener.statement=select * from pattern[every-distinct(s.completeMessage) s=Message]
#esper.message.aggregatedListener.statement=select count(*) as count, url from Message group by url output all every 1 minute
esper.message.aggregatedListener.statement=select count(*) as count, url, type as messageType from Message group by url output all every 1 minute
esper.message.counter.statement=select count(*) as count, completeMessage as service from Message group by completeMessage output all every 1 minute
#Trigger an event Each 5 minutes
#esper.url.tree.event.statement=select * from UrlTreeNodeEvent.win:time(300)
#Trigger an event each time a UrlTreeNodeEvent is created
esper.url.tree.event.statement=select * from UrlTreeNodeEvent

#------------------------------------------------------------------------------
# Regex to determine if the received request is a WSDl or REST request
#------------------------------------------------------------------------------
proxy.wsdl.request.detect=.*?wsdl
proxy.rest.request.detect.parameters=.*?.*=.*
proxy.rest.request.detect.dynamic=test
proxy.soap.request.detect.schema=schemas.xmlsoap.org
proxy.soap.request.detect.bodyStartXml=<?xml
